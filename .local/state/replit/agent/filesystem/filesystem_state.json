{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Vendor Column Restorer â€” Backend System\n\n## Overview\n\nA Shopify Admin UI Extension backend system that restores the Vendor column in product lists and enables vendor-based operations. The system provides comprehensive vendor management, bulk product operations, CSV export functionality, and real-time monitoring through a React-based admin dashboard.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite for build tooling\n- **UI Library**: Shadcn/ui components built on Radix UI primitives for accessible, modern interfaces\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n\n### Backend Architecture\n- **Runtime**: Node.js with TypeScript using ESM modules\n- **Framework**: Express.js for HTTP server and API routing\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Database Connection**: Neon serverless PostgreSQL with connection pooling\n- **Migration System**: Drizzle Kit for schema migrations and database management\n- **Middleware**: Custom rate limiting, logging, and error handling middleware\n\n### Data Storage Architecture\n- **ORM**: Drizzle ORM with schema-first approach for type safety\n- **Schema Design**: Modular schema with separate tables for users, shop settings, bulk jobs, vendors, API logs, and system metrics\n- **Connection Management**: Connection pooling with @neondatabase/serverless\n- **Data Validation**: Zod schemas generated from Drizzle schema for runtime validation\n\n### API Design\n- **Pattern**: RESTful API design with structured JSON responses\n- **Rate Limiting**: Multi-tier rate limiting (general, bulk operations, exports, Shopify API)\n- **Logging**: Comprehensive API call logging with performance metrics\n- **Error Handling**: Centralized error handling with proper HTTP status codes\n- **Bulk Operations**: Asynchronous job processing with status tracking\n\n### Authentication & Security\n- **Shop Authentication**: OAuth integration with Shopify stores\n- **Token Management**: Encrypted storage of Shopify access tokens using AES-256-GCM\n- **Rate Limiting**: Protection against abuse with configurable limits\n- **Input Validation**: Zod validation on all API endpoints\n\n### Service Layer Architecture\n- **Shopify Integration**: Dedicated service for GraphQL API interactions\n- **Bulk Job Processing**: Asynchronous job processor with retry logic\n- **CSV Export**: Streaming CSV generation with signed download URLs\n- **Authentication Service**: Token encryption/decryption and credential management\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: Serverless PostgreSQL database connection\n- **drizzle-orm & drizzle-kit**: Type-safe ORM and migration tooling\n- **express**: Web framework for API server\n- **@tanstack/react-query**: Server state management for React\n- **zod**: Runtime type validation and schema definition\n\n### UI Components\n- **@radix-ui/***: Comprehensive accessible UI primitives (dialogs, forms, navigation, etc.)\n- **class-variance-authority**: Type-safe CSS class variants\n- **tailwindcss**: Utility-first CSS framework\n- **lucide-react**: Icon library for consistent iconography\n\n### Development Tools\n- **vite**: Fast build tool with HMR for development\n- **typescript**: Type safety across frontend and backend\n- **@replit/vite-plugin-***: Replit-specific development enhancements\n- **esbuild**: Fast JavaScript bundler for production builds\n\n### Shopify Integration\n- **Shopify Admin GraphQL API**: Product data retrieval and bulk operations\n- **OAuth 2.0**: Shop authentication and authorization\n- **Webhooks**: Real-time updates from Shopify (planned integration)\n\n### Monitoring & Logging\n- **Custom Logger**: Structured JSON logging with configurable levels\n- **API Metrics**: Response time tracking and error rate monitoring\n- **System Metrics**: Performance and usage analytics storage","size_bytes":4215},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { z } from \"zod\";\nimport { storage } from \"./storage\";\nimport { bulkJobProcessor } from \"./services/bulk-jobs\";\nimport { csvExportService } from \"./services/csv-export\";\nimport { authService } from \"./services/auth\";\nimport { createShopifyService } from \"./services/shopify\";\nimport { logger } from \"./utils/logger\";\nimport { \n  generalApiLimiter, \n  bulkOperationLimiter, \n  exportLimiter, \n  shopifyApiLimiter \n} from \"./middleware/rate-limit\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Apply general rate limiting to all API routes\n  app.use('/api', generalApiLimiter.middleware());\n\n  // Middleware to log API calls\n  app.use('/api', async (req, res, next) => {\n    const start = Date.now();\n    \n    res.on('finish', async () => {\n      const responseTime = Date.now() - start;\n      \n      try {\n        await storage.createApiLog({\n          endpoint: req.path,\n          method: req.method,\n          statusCode: res.statusCode,\n          responseTime,\n          shopDomain: req.headers['x-shop-domain'] as string || req.body?.shopDomain,\n          errorMessage: res.statusCode >= 400 ? res.statusMessage : undefined,\n        });\n      } catch (error) {\n        logger.error('Failed to log API call', {\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    });\n\n    next();\n  });\n\n  // Health check endpoint\n  app.get('/api/health', async (req, res) => {\n    try {\n      const stats = await storage.getSystemStats();\n      res.json({\n        status: 'healthy',\n        timestamp: new Date().toISOString(),\n        stats,\n      });\n    } catch (error) {\n      logger.error('Health check failed', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      res.status(500).json({\n        status: 'unhealthy',\n        error: 'Database connection failed',\n      });\n    }\n  });\n\n  // Get distinct vendor list (cached)\n  app.get('/api/vendors', shopifyApiLimiter.middleware(), async (req, res) => {\n    try {\n      const { shopDomain } = req.query;\n      \n      if (!shopDomain || typeof shopDomain !== 'string') {\n        return res.status(400).json({ error: 'shopDomain is required' });\n      }\n\n      // Get cached vendors from database\n      let vendors = await storage.getVendors(shopDomain);\n      \n      // If no vendors in cache or cache is old, refresh from Shopify\n      if (vendors.length === 0) {\n        const shopSettings = await storage.getShopSettings(shopDomain);\n        \n        if (!shopSettings?.accessToken) {\n          return res.status(401).json({ error: 'Shop not authenticated' });\n        }\n\n        const shopifyService = createShopifyService(shopDomain, shopSettings.accessToken);\n        const shopifyVendors = await shopifyService.getAllVendors();\n        \n        // Update vendor cache\n        for (const vendorName of shopifyVendors) {\n          const existingVendor = await storage.getVendorByName(shopDomain, vendorName);\n          \n          if (!existingVendor) {\n            await storage.createVendor({\n              shopDomain,\n              name: vendorName,\n              productCount: 0,\n            });\n          }\n        }\n        \n        vendors = await storage.getVendors(shopDomain);\n      }\n\n      res.json({ vendors: vendors.map(v => v.name) });\n    } catch (error) {\n      logger.error('Failed to get vendors', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      res.status(500).json({ error: 'Failed to fetch vendors' });\n    }\n  });\n\n  // Bulk update vendor\n  app.post('/api/bulk-update-vendor', bulkOperationLimiter.middleware(), async (req, res) => {\n    try {\n      const schema = z.object({\n        shopDomain: z.string(),\n        productIds: z.array(z.string()).min(1),\n        vendor: z.string().min(1),\n      });\n\n      const { shopDomain, productIds, vendor } = schema.parse(req.body);\n\n      // Validate shop access\n      const hasAccess = await authService.validateShopAccess(shopDomain);\n      if (!hasAccess) {\n        return res.status(401).json({ error: 'Shop not authenticated' });\n      }\n\n      // Create bulk job\n      const job = await bulkJobProcessor.createJob({\n        shopDomain,\n        productIds,\n        targetVendor: vendor,\n        status: 'PENDING',\n        totalCount: productIds.length,\n      });\n\n      logger.bulkJobStart(job.id, shopDomain, productIds.length);\n\n      res.json({\n        jobId: job.id,\n        status: job.status,\n        message: 'Bulk update job created successfully',\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          error: 'Invalid request data',\n          details: error.errors,\n        });\n      }\n\n      logger.error('Bulk update failed', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      res.status(500).json({ error: 'Failed to create bulk update job' });\n    }\n  });\n\n  // Get bulk job status\n  app.get('/api/bulk-jobs/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const jobStatus = await bulkJobProcessor.getJobStatus(id);\n\n      if (!jobStatus.job) {\n        return res.status(404).json({ error: 'Job not found' });\n      }\n\n      res.json({\n        job: jobStatus.job,\n        progress: jobStatus.progress,\n        isProcessing: jobStatus.isProcessing,\n      });\n    } catch (error) {\n      logger.error('Failed to get job status', {\n        jobId: req.params.id,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      res.status(500).json({ error: 'Failed to get job status' });\n    }\n  });\n\n  // Get recent bulk jobs\n  app.get('/api/bulk-jobs', async (req, res) => {\n    try {\n      const { shopDomain, limit } = req.query;\n      \n      const jobs = await bulkJobProcessor.getRecentJobs(\n        shopDomain as string,\n        limit ? parseInt(limit as string) : undefined\n      );\n\n      res.json({ jobs });\n    } catch (error) {\n      logger.error('Failed to get bulk jobs', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      res.status(500).json({ error: 'Failed to fetch bulk jobs' });\n    }\n  });\n\n  // Retry bulk job\n  app.post('/api/bulk-jobs/:id/retry', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const job = await bulkJobProcessor.retryJob(id);\n      \n      res.json({\n        job,\n        message: 'Job retry initiated',\n      });\n    } catch (error) {\n      logger.error('Failed to retry job', {\n        jobId: req.params.id,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      res.status(400).json({ \n        error: error instanceof Error ? error.message : 'Failed to retry job',\n      });\n    }\n  });\n\n  // Cancel bulk job\n  app.post('/api/bulk-jobs/:id/cancel', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const job = await bulkJobProcessor.cancelJob(id);\n      \n      res.json({\n        job,\n        message: 'Job cancelled successfully',\n      });\n    } catch (error) {\n      logger.error('Failed to cancel job', {\n        jobId: req.params.id,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      res.status(400).json({ \n        error: error instanceof Error ? error.message : 'Failed to cancel job',\n      });\n    }\n  });\n\n  // Export products\n  app.post('/api/export', exportLimiter.middleware(), async (req, res) => {\n    try {\n      const schema = z.object({\n        shopDomain: z.string(),\n        vendor: z.string().optional(),\n        filters: z.object({\n          status: z.string().optional(),\n          productType: z.string().optional(),\n        }).optional(),\n      });\n\n      const { shopDomain, vendor, filters } = schema.parse(req.body);\n\n      // Validate shop access\n      const hasAccess = await authService.validateShopAccess(shopDomain);\n      if (!hasAccess) {\n        return res.status(401).json({ error: 'Shop not authenticated' });\n      }\n\n      logger.exportRequest(shopDomain, vendor, filters);\n\n      const signedUrl = await csvExportService.exportProducts({\n        shopDomain,\n        vendor,\n        filters,\n      });\n\n      res.json({\n        downloadUrl: signedUrl,\n        message: 'Export created successfully',\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          error: 'Invalid request data',\n          details: error.errors,\n        });\n      }\n\n      logger.error('Export failed', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      res.status(500).json({ error: 'Failed to create export' });\n    }\n  });\n\n  // Download exported CSV\n  app.get('/api/export/download/:exportId', async (req, res) => {\n    try {\n      const { exportId } = req.params;\n      const { token } = req.query;\n\n      if (!token || typeof token !== 'string') {\n        return res.status(400).json({ error: 'Missing export token' });\n      }\n\n      // Verify token\n      const tokenData = csvExportService.verifyExportToken(token);\n      \n      // Get CSV content\n      const csvContent = await csvExportService.getCsvContent(exportId);\n      \n      if (!csvContent) {\n        return res.status(404).json({ error: 'Export not found or expired' });\n      }\n\n      // Set headers for CSV download\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', `attachment; filename=\"products-export-${exportId}.csv\"`);\n      res.send(csvContent);\n\n      logger.info('CSV download completed', {\n        exportId,\n        shopDomain: tokenData.shopDomain,\n      });\n    } catch (error) {\n      logger.error('CSV download failed', {\n        exportId: req.params.exportId,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      res.status(400).json({ error: 'Invalid or expired download link' });\n    }\n  });\n\n  // Get shop settings\n  app.get('/api/settings', async (req, res) => {\n    try {\n      const { shopDomain } = req.query;\n      \n      if (!shopDomain || typeof shopDomain !== 'string') {\n        return res.status(400).json({ error: 'shopDomain is required' });\n      }\n\n      const settings = await storage.getShopSettings(shopDomain);\n      \n      if (!settings) {\n        return res.status(404).json({ error: 'Shop settings not found' });\n      }\n\n      // Return settings without sensitive data\n      res.json({\n        shopDomain: settings.shopDomain,\n        showVendorColumn: settings.showVendorColumn,\n        lastUpdated: settings.lastUpdated,\n      });\n    } catch (error) {\n      logger.error('Failed to get settings', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      res.status(500).json({ error: 'Failed to fetch settings' });\n    }\n  });\n\n  // Update shop settings\n  app.post('/api/settings', async (req, res) => {\n    try {\n      const schema = z.object({\n        shopDomain: z.string(),\n        showVendorColumn: z.boolean().optional(),\n      });\n\n      const { shopDomain, showVendorColumn } = schema.parse(req.body);\n\n      // Validate shop access\n      const hasAccess = await authService.validateShopAccess(shopDomain);\n      if (!hasAccess) {\n        return res.status(401).json({ error: 'Shop not authenticated' });\n      }\n\n      const updatedSettings = await storage.updateShopSettings(shopDomain, {\n        showVendorColumn,\n      });\n\n      res.json({\n        shopDomain: updatedSettings.shopDomain,\n        showVendorColumn: updatedSettings.showVendorColumn,\n        lastUpdated: updatedSettings.lastUpdated,\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          error: 'Invalid request data',\n          details: error.errors,\n        });\n      }\n\n      logger.error('Failed to update settings', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      res.status(500).json({ error: 'Failed to update settings' });\n    }\n  });\n\n  // Get system statistics\n  app.get('/api/stats', async (req, res) => {\n    try {\n      const stats = await storage.getSystemStats();\n      const apiStats = await storage.getApiLogStats(24);\n      \n      res.json({\n        ...stats,\n        apiEndpoints: apiStats,\n      });\n    } catch (error) {\n      logger.error('Failed to get system stats', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      res.status(500).json({ error: 'Failed to fetch system statistics' });\n    }\n  });\n\n  // Get API logs\n  app.get('/api/logs', async (req, res) => {\n    try {\n      const { shopDomain, limit } = req.query;\n      \n      const logs = await storage.getApiLogs(\n        shopDomain as string,\n        limit ? parseInt(limit as string) : undefined\n      );\n\n      res.json({ logs });\n    } catch (error) {\n      logger.error('Failed to get API logs', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      res.status(500).json({ error: 'Failed to fetch API logs' });\n    }\n  });\n\n  // OAuth callback endpoint (for Shopify app installation)\n  app.get('/api/auth/callback', async (req, res) => {\n    try {\n      const { code, shop, state } = req.query;\n      \n      if (!code || !shop) {\n        return res.status(400).json({ error: 'Missing required parameters' });\n      }\n\n      // In production, validate state parameter for CSRF protection\n      \n      const clientId = process.env.SHOPIFY_CLIENT_ID || 'your_client_id';\n      const clientSecret = process.env.SHOPIFY_CLIENT_SECRET || 'your_client_secret';\n      \n      const tokenData = await authService.exchangeCodeForToken(\n        shop as string,\n        code as string,\n        clientId,\n        clientSecret\n      );\n\n      await authService.storeShopCredentials(\n        shop as string,\n        tokenData.access_token,\n        tokenData.scope\n      );\n\n      logger.authSuccess(shop as string, tokenData.scope);\n\n      res.redirect(`/dashboard?shop=${shop}&installed=true`);\n    } catch (error) {\n      logger.authFailure(\n        req.query.shop as string || 'unknown',\n        error instanceof Error ? error.message : 'Unknown error'\n      );\n      res.status(400).json({ error: 'Authentication failed' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":14428},"server/storage.ts":{"content":"import { \n  users, shopSettings, bulkJobs, vendors, apiLogs, systemMetrics,\n  type User, type InsertUser,\n  type ShopSettings, type InsertShopSettings,\n  type BulkJob, type InsertBulkJob,\n  type Vendor, type InsertVendor,\n  type ApiLog, type InsertApiLog,\n  type SystemMetric, type InsertSystemMetric\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, count, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Shop settings methods\n  getShopSettings(shopDomain: string): Promise<ShopSettings | undefined>;\n  createShopSettings(settings: InsertShopSettings): Promise<ShopSettings>;\n  updateShopSettings(shopDomain: string, settings: Partial<InsertShopSettings>): Promise<ShopSettings>;\n\n  // Bulk job methods\n  createBulkJob(job: InsertBulkJob): Promise<BulkJob>;\n  getBulkJob(id: string): Promise<BulkJob | undefined>;\n  updateBulkJob(id: string, updates: Partial<BulkJob>): Promise<BulkJob>;\n  getRecentBulkJobs(shopDomain?: string, limit?: number): Promise<BulkJob[]>;\n  getBulkJobsByStatus(status: BulkJob['status']): Promise<BulkJob[]>;\n\n  // Vendor methods\n  getVendors(shopDomain: string): Promise<Vendor[]>;\n  createVendor(vendor: InsertVendor): Promise<Vendor>;\n  updateVendor(id: string, updates: Partial<Vendor>): Promise<Vendor>;\n  deleteVendor(id: string): Promise<void>;\n  getVendorByName(shopDomain: string, name: string): Promise<Vendor | undefined>;\n\n  // API log methods\n  createApiLog(log: InsertApiLog): Promise<ApiLog>;\n  getApiLogs(shopDomain?: string, limit?: number): Promise<ApiLog[]>;\n  getApiLogStats(hours?: number): Promise<{ endpoint: string; avgResponseTime: number; errorRate: number }[]>;\n\n  // System metrics methods\n  createSystemMetric(metric: InsertSystemMetric): Promise<SystemMetric>;\n  getSystemMetrics(metricName?: string, hours?: number): Promise<SystemMetric[]>;\n  getSystemStats(): Promise<{\n    activeShops: number;\n    totalVendors: number;\n    bulkJobsToday: number;\n    apiSuccessRate: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async getShopSettings(shopDomain: string): Promise<ShopSettings | undefined> {\n    const [settings] = await db\n      .select()\n      .from(shopSettings)\n      .where(eq(shopSettings.shopDomain, shopDomain));\n    return settings || undefined;\n  }\n\n  async createShopSettings(settings: InsertShopSettings): Promise<ShopSettings> {\n    const [newSettings] = await db\n      .insert(shopSettings)\n      .values(settings)\n      .returning();\n    return newSettings;\n  }\n\n  async updateShopSettings(shopDomain: string, updates: Partial<InsertShopSettings>): Promise<ShopSettings> {\n    const [updatedSettings] = await db\n      .update(shopSettings)\n      .set({ ...updates, lastUpdated: new Date() })\n      .where(eq(shopSettings.shopDomain, shopDomain))\n      .returning();\n    return updatedSettings;\n  }\n\n  async createBulkJob(job: InsertBulkJob): Promise<BulkJob> {\n    const jobData = {\n      shopDomain: job.shopDomain,\n      productIds: job.productIds,\n      targetVendor: job.targetVendor,\n      status: job.status || ('PENDING' as const),\n      totalCount: job.productIds.length,\n    };\n    \n    const [newJob] = await db\n      .insert(bulkJobs)\n      .values(jobData)\n      .returning();\n    return newJob;\n  }\n\n  async getBulkJob(id: string): Promise<BulkJob | undefined> {\n    const [job] = await db\n      .select()\n      .from(bulkJobs)\n      .where(eq(bulkJobs.id, id));\n    return job || undefined;\n  }\n\n  async updateBulkJob(id: string, updates: Partial<BulkJob>): Promise<BulkJob> {\n    const [updatedJob] = await db\n      .update(bulkJobs)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(bulkJobs.id, id))\n      .returning();\n    return updatedJob;\n  }\n\n  async getRecentBulkJobs(shopDomain?: string, limit = 10): Promise<BulkJob[]> {\n    if (shopDomain) {\n      return await db\n        .select()\n        .from(bulkJobs)\n        .where(eq(bulkJobs.shopDomain, shopDomain))\n        .orderBy(desc(bulkJobs.createdAt))\n        .limit(limit);\n    }\n    \n    return await db\n      .select()\n      .from(bulkJobs)\n      .orderBy(desc(bulkJobs.createdAt))\n      .limit(limit);\n  }\n\n  async getBulkJobsByStatus(status: BulkJob['status']): Promise<BulkJob[]> {\n    return await db\n      .select()\n      .from(bulkJobs)\n      .where(eq(bulkJobs.status, status as any))\n      .orderBy(desc(bulkJobs.createdAt));\n  }\n\n  async getVendors(shopDomain: string): Promise<Vendor[]> {\n    return db\n      .select()\n      .from(vendors)\n      .where(eq(vendors.shopDomain, shopDomain))\n      .orderBy(vendors.name);\n  }\n\n  async createVendor(vendor: InsertVendor): Promise<Vendor> {\n    const [newVendor] = await db\n      .insert(vendors)\n      .values(vendor)\n      .returning();\n    return newVendor;\n  }\n\n  async updateVendor(id: string, updates: Partial<Vendor>): Promise<Vendor> {\n    const [updatedVendor] = await db\n      .update(vendors)\n      .set({ ...updates, lastUpdated: new Date() })\n      .where(eq(vendors.id, id))\n      .returning();\n    return updatedVendor;\n  }\n\n  async deleteVendor(id: string): Promise<void> {\n    await db.delete(vendors).where(eq(vendors.id, id));\n  }\n\n  async getVendorByName(shopDomain: string, name: string): Promise<Vendor | undefined> {\n    const [vendor] = await db\n      .select()\n      .from(vendors)\n      .where(and(eq(vendors.shopDomain, shopDomain), eq(vendors.name, name)));\n    return vendor || undefined;\n  }\n\n  async createApiLog(log: InsertApiLog): Promise<ApiLog> {\n    const [newLog] = await db\n      .insert(apiLogs)\n      .values(log)\n      .returning();\n    return newLog;\n  }\n\n  async getApiLogs(shopDomain?: string, limit = 100): Promise<ApiLog[]> {\n    if (shopDomain) {\n      return await db\n        .select()\n        .from(apiLogs)\n        .where(eq(apiLogs.shopDomain, shopDomain))\n        .orderBy(desc(apiLogs.timestamp))\n        .limit(limit);\n    }\n    \n    return await db\n      .select()\n      .from(apiLogs)\n      .orderBy(desc(apiLogs.timestamp))\n      .limit(limit);\n  }\n\n  async getApiLogStats(hours = 24): Promise<{ endpoint: string; avgResponseTime: number; errorRate: number }[]> {\n    const since = new Date(Date.now() - hours * 60 * 60 * 1000);\n    \n    const stats = await db\n      .select({\n        endpoint: apiLogs.endpoint,\n        avgResponseTime: sql<number>`AVG(${apiLogs.responseTime})::integer`,\n        totalRequests: count(),\n        errorCount: sql<number>`SUM(CASE WHEN ${apiLogs.statusCode} >= 400 THEN 1 ELSE 0 END)::integer`,\n      })\n      .from(apiLogs)\n      .where(gte(apiLogs.timestamp, since))\n      .groupBy(apiLogs.endpoint);\n\n    return stats.map(stat => ({\n      endpoint: stat.endpoint,\n      avgResponseTime: stat.avgResponseTime || 0,\n      errorRate: stat.totalRequests > 0 ? (stat.errorCount / stat.totalRequests) * 100 : 0,\n    }));\n  }\n\n  async createSystemMetric(metric: InsertSystemMetric): Promise<SystemMetric> {\n    const [newMetric] = await db\n      .insert(systemMetrics)\n      .values(metric)\n      .returning();\n    return newMetric;\n  }\n\n  async getSystemMetrics(metricName?: string, hours = 24): Promise<SystemMetric[]> {\n    const since = new Date(Date.now() - hours * 60 * 60 * 1000);\n    \n    if (metricName) {\n      return await db\n        .select()\n        .from(systemMetrics)\n        .where(and(\n          gte(systemMetrics.timestamp, since),\n          eq(systemMetrics.metricName, metricName)\n        ))\n        .orderBy(desc(systemMetrics.timestamp));\n    }\n    \n    return await db\n      .select()\n      .from(systemMetrics)\n      .where(gte(systemMetrics.timestamp, since))\n      .orderBy(desc(systemMetrics.timestamp));\n  }\n\n  async getSystemStats(): Promise<{\n    activeShops: number;\n    totalVendors: number;\n    bulkJobsToday: number;\n    apiSuccessRate: number;\n  }> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const [activeShopsResult] = await db\n      .select({ count: count() })\n      .from(shopSettings);\n\n    const [totalVendorsResult] = await db\n      .select({ count: count() })\n      .from(vendors);\n\n    const [bulkJobsTodayResult] = await db\n      .select({ count: count() })\n      .from(bulkJobs)\n      .where(gte(bulkJobs.createdAt, today));\n\n    const [apiStatsResult] = await db\n      .select({\n        total: count(),\n        errors: sql<number>`SUM(CASE WHEN ${apiLogs.statusCode} >= 400 THEN 1 ELSE 0 END)::integer`,\n      })\n      .from(apiLogs)\n      .where(gte(apiLogs.timestamp, today));\n\n    const successRate = apiStatsResult.total > 0 \n      ? ((apiStatsResult.total - apiStatsResult.errors) / apiStatsResult.total) * 100 \n      : 100;\n\n    return {\n      activeShops: activeShopsResult.count,\n      totalVendors: totalVendorsResult.count,\n      bulkJobsToday: bulkJobsTodayResult.count,\n      apiSuccessRate: Math.round(successRate * 10) / 10,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9569},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const shopSettings = pgTable(\"shop_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  shopDomain: text(\"shop_domain\").notNull().unique(),\n  showVendorColumn: boolean(\"show_vendor_column\").default(true),\n  accessToken: text(\"access_token\"),\n  encryptedToken: text(\"encrypted_token\"),\n  tokenScope: text(\"token_scope\"),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const bulkJobs = pgTable(\"bulk_jobs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  shopDomain: text(\"shop_domain\").notNull(),\n  productIds: jsonb(\"product_ids\").$type<string[]>().notNull(),\n  targetVendor: text(\"target_vendor\").notNull(),\n  status: text(\"status\").$type<'PENDING' | 'RUNNING' | 'SUCCESS' | 'FAILED'>().default('PENDING'),\n  errorMessage: text(\"error_message\"),\n  processedCount: integer(\"processed_count\").default(0),\n  totalCount: integer(\"total_count\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const vendors = pgTable(\"vendors\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  shopDomain: text(\"shop_domain\").notNull(),\n  name: text(\"name\").notNull(),\n  productCount: integer(\"product_count\").default(0),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\nexport const apiLogs = pgTable(\"api_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  shopDomain: text(\"shop_domain\"),\n  endpoint: text(\"endpoint\").notNull(),\n  method: text(\"method\").notNull(),\n  statusCode: integer(\"status_code\"),\n  responseTime: integer(\"response_time\"),\n  errorMessage: text(\"error_message\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const systemMetrics = pgTable(\"system_metrics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  metricName: text(\"metric_name\").notNull(),\n  value: text(\"value\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Relations\nexport const shopSettingsRelations = relations(shopSettings, ({ many }) => ({\n  bulkJobs: many(bulkJobs),\n  vendors: many(vendors),\n  apiLogs: many(apiLogs),\n}));\n\nexport const bulkJobsRelations = relations(bulkJobs, ({ one }) => ({\n  shop: one(shopSettings, {\n    fields: [bulkJobs.shopDomain],\n    references: [shopSettings.shopDomain],\n  }),\n}));\n\nexport const vendorsRelations = relations(vendors, ({ one }) => ({\n  shop: one(shopSettings, {\n    fields: [vendors.shopDomain],\n    references: [shopSettings.shopDomain],\n  }),\n}));\n\nexport const apiLogsRelations = relations(apiLogs, ({ one }) => ({\n  shop: one(shopSettings, {\n    fields: [apiLogs.shopDomain],\n    references: [shopSettings.shopDomain],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertShopSettingsSchema = createInsertSchema(shopSettings).omit({\n  id: true,\n  createdAt: true,\n  lastUpdated: true,\n});\n\nexport const insertBulkJobSchema = createInsertSchema(bulkJobs).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  completedAt: true,\n  processedCount: true,\n});\n\nexport const insertVendorSchema = createInsertSchema(vendors).omit({\n  id: true,\n  lastUpdated: true,\n});\n\nexport const insertApiLogSchema = createInsertSchema(apiLogs).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertSystemMetricSchema = createInsertSchema(systemMetrics).omit({\n  id: true,\n  timestamp: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type ShopSettings = typeof shopSettings.$inferSelect;\nexport type InsertShopSettings = z.infer<typeof insertShopSettingsSchema>;\n\nexport type BulkJob = typeof bulkJobs.$inferSelect;\nexport type InsertBulkJob = z.infer<typeof insertBulkJobSchema>;\n\nexport type Vendor = typeof vendors.$inferSelect;\nexport type InsertVendor = z.infer<typeof insertVendorSchema>;\n\nexport type ApiLog = typeof apiLogs.$inferSelect;\nexport type InsertApiLog = z.infer<typeof insertApiLogSchema>;\n\nexport type SystemMetric = typeof systemMetrics.$inferSelect;\nexport type InsertSystemMetric = z.infer<typeof insertSystemMetricSchema>;\n","size_bytes":4760},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AppLayout } from \"@/components/layout/app-layout\";\nimport Dashboard from \"@/pages/dashboard\";\nimport BulkJobs from \"@/pages/bulk-jobs\";\nimport ApiStatus from \"@/pages/api-status\";\nimport Vendors from \"@/pages/vendors\";\nimport Settings from \"@/pages/settings\";\nimport Logs from \"@/pages/logs\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <AppLayout>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/bulk-jobs\" component={BulkJobs} />\n        <Route path=\"/api-status\" component={ApiStatus} />\n        <Route path=\"/vendors\" component={Vendors} />\n        <Route path=\"/settings\" component={Settings} />\n        <Route path=\"/logs\" component={Logs} />\n        <Route component={NotFound} />\n      </Switch>\n    </AppLayout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1288},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/middleware/rate-limit.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { logger } from '../utils/logger';\n\ninterface RateLimitConfig {\n  windowMs: number;\n  maxRequests: number;\n  message?: string;\n  skipSuccessfulRequests?: boolean;\n}\n\ninterface RequestLog {\n  count: number;\n  resetTime: number;\n}\n\nexport class RateLimiter {\n  private requests = new Map<string, RequestLog>();\n  private config: RateLimitConfig;\n\n  constructor(config: RateLimitConfig) {\n    this.config = config;\n    \n    // Clean up old entries every 5 minutes\n    setInterval(() => {\n      this.cleanup();\n    }, 5 * 60 * 1000);\n  }\n\n  middleware() {\n    return (req: Request, res: Response, next: NextFunction) => {\n      const key = this.generateKey(req);\n      const now = Date.now();\n      const windowStart = now - this.config.windowMs;\n\n      let requestLog = this.requests.get(key);\n\n      if (!requestLog || requestLog.resetTime <= now) {\n        requestLog = {\n          count: 0,\n          resetTime: now + this.config.windowMs,\n        };\n        this.requests.set(key, requestLog);\n      }\n\n      requestLog.count++;\n\n      if (requestLog.count > this.config.maxRequests) {\n        logger.warn('Rate limit exceeded', {\n          key,\n          count: requestLog.count,\n          limit: this.config.maxRequests,\n          windowMs: this.config.windowMs,\n        });\n\n        res.status(429).json({\n          error: this.config.message || 'Too many requests',\n          retryAfter: Math.ceil((requestLog.resetTime - now) / 1000),\n        });\n        return;\n      }\n\n      // Add rate limit headers\n      res.set({\n        'X-RateLimit-Limit': this.config.maxRequests.toString(),\n        'X-RateLimit-Remaining': Math.max(0, this.config.maxRequests - requestLog.count).toString(),\n        'X-RateLimit-Reset': Math.ceil(requestLog.resetTime / 1000).toString(),\n      });\n\n      next();\n    };\n  }\n\n  private generateKey(req: Request): string {\n    // Use shop domain if available, otherwise fall back to IP\n    const shopDomain = req.headers['x-shop-domain'] as string || req.body?.shopDomain;\n    return shopDomain || req.ip || req.connection.remoteAddress || 'unknown';\n  }\n\n  private cleanup(): void {\n    const now = Date.now();\n    let cleanedCount = 0;\n\n    this.requests.forEach((requestLog, key) => {\n      if (requestLog.resetTime <= now) {\n        this.requests.delete(key);\n        cleanedCount++;\n      }\n    });\n\n    if (cleanedCount > 0) {\n      logger.debug('Rate limiter cleanup', { cleanedEntries: cleanedCount });\n    }\n  }\n}\n\n// Shopify API rate limit: 2 requests per second\nexport const shopifyApiLimiter = new RateLimiter({\n  windowMs: 1000, // 1 second\n  maxRequests: 2,\n  message: 'Shopify API rate limit exceeded. Please wait before making another request.',\n});\n\n// General API rate limit: 100 requests per minute\nexport const generalApiLimiter = new RateLimiter({\n  windowMs: 60 * 1000, // 1 minute\n  maxRequests: 100,\n  message: 'API rate limit exceeded. Please wait before making more requests.',\n});\n\n// Bulk operations rate limit: 5 requests per minute\nexport const bulkOperationLimiter = new RateLimiter({\n  windowMs: 60 * 1000, // 1 minute\n  maxRequests: 5,\n  message: 'Bulk operation rate limit exceeded. Please wait before starting another bulk operation.',\n});\n\n// Export rate limit: 10 requests per hour\nexport const exportLimiter = new RateLimiter({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  maxRequests: 10,\n  message: 'Export rate limit exceeded. Please wait before requesting another export.',\n});\n","size_bytes":3513},"server/services/auth.ts":{"content":"import crypto from 'crypto';\nimport { storage } from '../storage';\nimport { logger } from '../utils/logger';\nimport type { ShopSettings, InsertShopSettings } from '@shared/schema';\n\nexport class AuthService {\n  private readonly ENCRYPTION_KEY = process.env.SESSION_SECRET || 'default_secret_key_32_characters';\n  private readonly ALGORITHM = 'aes-256-gcm';\n\n  encryptToken(token: string): { encrypted: string; iv: string; tag: string } {\n    const iv = crypto.randomBytes(16);\n    const cipher = crypto.createCipher(this.ALGORITHM, this.ENCRYPTION_KEY);\n    \n    let encrypted = cipher.update(token, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    \n    const tag = cipher.getAuthTag();\n    \n    return {\n      encrypted,\n      iv: iv.toString('hex'),\n      tag: tag.toString('hex'),\n    };\n  }\n\n  decryptToken(encryptedData: { encrypted: string; iv: string; tag: string }): string {\n    const decipher = crypto.createDecipher(this.ALGORITHM, this.ENCRYPTION_KEY);\n    decipher.setAuthTag(Buffer.from(encryptedData.tag, 'hex'));\n    \n    let decrypted = decipher.update(encryptedData.encrypted, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n    \n    return decrypted;\n  }\n\n  async storeShopCredentials(\n    shopDomain: string,\n    accessToken: string,\n    scope?: string\n  ): Promise<ShopSettings> {\n    try {\n      // Encrypt the access token\n      const encryptionResult = this.encryptToken(accessToken);\n      const encryptedToken = JSON.stringify(encryptionResult);\n\n      // Check if shop already exists\n      const existingShop = await storage.getShopSettings(shopDomain);\n\n      if (existingShop) {\n        // Update existing shop\n        return storage.updateShopSettings(shopDomain, {\n          accessToken, // Store plain text for development - in production, only store encrypted\n          encryptedToken,\n          tokenScope: scope,\n        });\n      } else {\n        // Create new shop\n        const shopData: InsertShopSettings = {\n          shopDomain,\n          accessToken, // Store plain text for development\n          encryptedToken,\n          tokenScope: scope,\n          showVendorColumn: true,\n        };\n\n        return storage.createShopSettings(shopData);\n      }\n    } catch (error) {\n      logger.error('Failed to store shop credentials', {\n        shopDomain,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      throw error;\n    }\n  }\n\n  async getShopCredentials(shopDomain: string): Promise<{\n    accessToken: string;\n    scope?: string;\n  } | null> {\n    try {\n      const shopSettings = await storage.getShopSettings(shopDomain);\n      \n      if (!shopSettings) {\n        return null;\n      }\n\n      // For development, return plain text token\n      if (shopSettings.accessToken) {\n        return {\n          accessToken: shopSettings.accessToken,\n          scope: shopSettings.tokenScope || undefined,\n        };\n      }\n\n      // In production, decrypt the token\n      if (shopSettings.encryptedToken) {\n        const encryptedData = JSON.parse(shopSettings.encryptedToken);\n        const accessToken = this.decryptToken(encryptedData);\n        \n        return {\n          accessToken,\n          scope: shopSettings.tokenScope || undefined,\n        };\n      }\n\n      return null;\n    } catch (error) {\n      logger.error('Failed to retrieve shop credentials', {\n        shopDomain,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      return null;\n    }\n  }\n\n  async validateShopAccess(shopDomain: string): Promise<boolean> {\n    try {\n      const credentials = await this.getShopCredentials(shopDomain);\n      return credentials !== null;\n    } catch (error) {\n      logger.error('Failed to validate shop access', {\n        shopDomain,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      return false;\n    }\n  }\n\n  async revokeShopAccess(shopDomain: string): Promise<void> {\n    try {\n      await storage.updateShopSettings(shopDomain, {\n        accessToken: null,\n        encryptedToken: null,\n        tokenScope: null,\n      });\n\n      logger.info('Shop access revoked', { shopDomain });\n    } catch (error) {\n      logger.error('Failed to revoke shop access', {\n        shopDomain,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      throw error;\n    }\n  }\n\n  generateShopifyAuthUrl(shopDomain: string, clientId: string, redirectUri: string, scopes: string[]): string {\n    const params = new URLSearchParams({\n      client_id: clientId,\n      scope: scopes.join(','),\n      redirect_uri: redirectUri,\n      state: crypto.randomBytes(16).toString('hex'),\n    });\n\n    return `https://${shopDomain}/admin/oauth/authorize?${params.toString()}`;\n  }\n\n  async exchangeCodeForToken(\n    shopDomain: string,\n    code: string,\n    clientId: string,\n    clientSecret: string\n  ): Promise<{ access_token: string; scope: string }> {\n    try {\n      const response = await fetch(`https://${shopDomain}/admin/oauth/access_token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          client_id: clientId,\n          client_secret: clientSecret,\n          code,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`OAuth token exchange failed: ${response.status} ${response.statusText}`);\n      }\n\n      const tokenData = await response.json();\n      \n      logger.info('OAuth token exchange successful', {\n        shopDomain,\n        scope: tokenData.scope,\n      });\n\n      return tokenData;\n    } catch (error) {\n      logger.error('OAuth token exchange failed', {\n        shopDomain,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      throw error;\n    }\n  }\n}\n\nexport const authService = new AuthService();\n","size_bytes":5850},"server/services/bulk-jobs.ts":{"content":"import { storage } from '../storage';\nimport { createShopifyService, type BulkUpdateResult } from './shopify';\nimport { logger } from '../utils/logger';\nimport type { BulkJob, InsertBulkJob } from '@shared/schema';\n\nexport class BulkJobProcessor {\n  private processingJobs = new Set<string>();\n\n  async createJob(jobData: InsertBulkJob): Promise<BulkJob> {\n    const job = await storage.createBulkJob(jobData);\n    \n    // Start processing the job asynchronously\n    this.processJob(job.id).catch(error => {\n      logger.error('Job processing failed', {\n        jobId: job.id,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n    });\n\n    return job;\n  }\n\n  async getJob(id: string): Promise<BulkJob | undefined> {\n    return storage.getBulkJob(id);\n  }\n\n  async getJobStatus(id: string): Promise<{ \n    job: BulkJob | undefined; \n    progress: number; \n    isProcessing: boolean; \n  }> {\n    const job = await storage.getBulkJob(id);\n    const progress = job ? (job.processedCount || 0) / job.totalCount : 0;\n    const isProcessing = this.processingJobs.has(id);\n\n    return {\n      job,\n      progress: Math.round(progress * 100),\n      isProcessing,\n    };\n  }\n\n  private async processJob(jobId: string): Promise<void> {\n    if (this.processingJobs.has(jobId)) {\n      logger.warn('Job already being processed', { jobId });\n      return;\n    }\n\n    this.processingJobs.add(jobId);\n\n    try {\n      const job = await storage.getBulkJob(jobId);\n      if (!job) {\n        throw new Error('Job not found');\n      }\n\n      logger.info('Starting job processing', {\n        jobId,\n        shopDomain: job.shopDomain,\n        productCount: job.productIds.length,\n        targetVendor: job.targetVendor,\n      });\n\n      // Update job status to RUNNING\n      await storage.updateBulkJob(jobId, { status: 'RUNNING' });\n\n      // Get shop settings to retrieve access token\n      const shopSettings = await storage.getShopSettings(job.shopDomain);\n      if (!shopSettings?.accessToken) {\n        throw new Error('Shop access token not found');\n      }\n\n      const shopifyService = createShopifyService(job.shopDomain, shopSettings.accessToken);\n\n      // Process products in batches to avoid rate limits\n      const batchSize = 10; // Reduced batch size for individual API calls\n      let processedCount = 0;\n      let successCount = 0;\n      let failureCount = 0;\n      const allErrors: string[] = [];\n\n      for (let i = 0; i < job.productIds.length; i += batchSize) {\n        const batch = job.productIds.slice(i, i + batchSize);\n        \n        try {\n          const result: BulkUpdateResult = await shopifyService.bulkUpdateVendor(batch, job.targetVendor);\n          \n          // Track actual successes and failures\n          successCount += result.successCount;\n          failureCount += result.failureCount;\n          processedCount += batch.length;\n          \n          // Log detailed results for this batch\n          logger.info('Batch processing completed', {\n            jobId,\n            batchNumber: Math.floor(i / batchSize) + 1,\n            batchSize: batch.length,\n            successCount: result.successCount,\n            failureCount: result.failureCount,\n            totalSuccessCount: successCount,\n            totalFailureCount: failureCount,\n          });\n          \n          // Log user errors if any\n          if (result.userErrors.length > 0) {\n            logger.warn('Batch update had user errors', {\n              jobId,\n              batchNumber: Math.floor(i / batchSize) + 1,\n              userErrors: result.userErrors,\n            });\n            allErrors.push(...result.userErrors.map(ue => \n              `Product ${ue.productId}: ${ue.message} (field: ${ue.field})`\n            ));\n          }\n          \n          // Log API errors if any\n          if (result.errors.length > 0) {\n            logger.warn('Batch update had API errors', {\n              jobId,\n              batchNumber: Math.floor(i / batchSize) + 1,\n              apiErrors: result.errors,\n            });\n            allErrors.push(...result.errors.map(e => \n              `Product ${e.productId}: ${e.error}`\n            ));\n          }\n          \n          // Update progress\n          await storage.updateBulkJob(jobId, { \n            processedCount,\n          });\n\n        } catch (error) {\n          logger.error('Batch processing completely failed', {\n            jobId,\n            batchNumber: Math.floor(i / batchSize) + 1,\n            batchSize: batch.length,\n            error: error instanceof Error ? error.message : 'Unknown error',\n          });\n          \n          // Mark all products in this batch as failed\n          failureCount += batch.length;\n          processedCount += batch.length;\n          allErrors.push(`Batch ${Math.floor(i / batchSize) + 1}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n      }\n\n      // Determine final job status based on results\n      const finalStatus = failureCount === 0 ? 'SUCCESS' : 'FAILED'; // Any failures mark job as FAILED\n      \n      const errorMessage = allErrors.length > 0 ? \n        `${failureCount} products failed. Errors: ${allErrors.slice(0, 5).join('; ')}${allErrors.length > 5 ? '...' : ''}` : \n        null;\n\n      await storage.updateBulkJob(jobId, {\n        status: finalStatus,\n        processedCount,\n        errorMessage,\n        completedAt: new Date(),\n      });\n\n      logger.info('Job processing completed', {\n        jobId,\n        status: finalStatus,\n        totalCount: job.totalCount,\n        processedCount,\n        successCount,\n        failureCount,\n        hasErrors: allErrors.length > 0,\n      });\n      \n      if (failureCount > 0) {\n        logger.warn('Job completed with failures', {\n          jobId,\n          successRate: Math.round((successCount / job.totalCount) * 100),\n          errorSummary: allErrors.slice(0, 10), // Log first 10 errors for debugging\n        });\n      }\n\n    } catch (error) {\n      logger.error('Job processing failed', {\n        jobId,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n\n      await storage.updateBulkJob(jobId, {\n        status: 'FAILED',\n        errorMessage: error instanceof Error ? error.message : 'Unknown error',\n        completedAt: new Date(),\n      });\n    } finally {\n      this.processingJobs.delete(jobId);\n    }\n  }\n\n  async retryJob(jobId: string): Promise<BulkJob> {\n    const job = await storage.getBulkJob(jobId);\n    if (!job) {\n      throw new Error('Job not found');\n    }\n\n    if (job.status === 'RUNNING') {\n      throw new Error('Job is currently running');\n    }\n\n    // Reset job status and counters\n    const updatedJob = await storage.updateBulkJob(jobId, {\n      status: 'PENDING',\n      processedCount: 0,\n      errorMessage: null,\n      completedAt: null,\n    });\n\n    // Start processing again\n    this.processJob(jobId).catch(error => {\n      logger.error('Job retry failed', {\n        jobId,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n    });\n\n    return updatedJob;\n  }\n\n  async cancelJob(jobId: string): Promise<BulkJob> {\n    const job = await storage.getBulkJob(jobId);\n    if (!job) {\n      throw new Error('Job not found');\n    }\n\n    if (job.status !== 'RUNNING' && job.status !== 'PENDING') {\n      throw new Error('Job cannot be cancelled in current status');\n    }\n\n    // Remove from processing set\n    this.processingJobs.delete(jobId);\n\n    return storage.updateBulkJob(jobId, {\n      status: 'FAILED',\n      errorMessage: 'Job cancelled by user',\n      completedAt: new Date(),\n    });\n  }\n\n  async getRecentJobs(shopDomain?: string, limit = 10): Promise<BulkJob[]> {\n    return storage.getRecentBulkJobs(shopDomain, limit);\n  }\n\n  async getPendingJobs(): Promise<BulkJob[]> {\n    return storage.getBulkJobsByStatus('PENDING');\n  }\n\n  async getRunningJobs(): Promise<BulkJob[]> {\n    return storage.getBulkJobsByStatus('RUNNING');\n  }\n}\n\nexport const bulkJobProcessor = new BulkJobProcessor();\n","size_bytes":8025},"server/services/csv-export.ts":{"content":"import { createShopifyService } from './shopify';\nimport { storage } from '../storage';\nimport { logger } from '../utils/logger';\nimport jwt from 'jsonwebtoken';\nimport type { ShopifyProduct } from './shopify';\n\nexport interface ExportOptions {\n  shopDomain: string;\n  vendor?: string;\n  filters?: {\n    status?: string;\n    productType?: string;\n  };\n}\n\nexport class CSVExportService {\n  private readonly JWT_SECRET: string;\n  private readonly EXPORT_EXPIRY = '1h'; // 1 hour expiry for signed URLs\n  private readonly MOCK_MODE = process.env.MOCK_SHOPIFY === 'true';\n\n  constructor() {\n    // Critical security fix: Require SESSION_SECRET, no insecure fallback\n    if (!process.env.SESSION_SECRET) {\n      throw new Error('SESSION_SECRET environment variable is required for secure JWT signing');\n    }\n    this.JWT_SECRET = process.env.SESSION_SECRET;\n  }\n\n  async exportProducts(options: ExportOptions): Promise<string> {\n    try {\n      logger.info('Starting CSV export', options);\n\n      let products: ShopifyProduct[] = [];\n      let isUsingMockData = false;\n\n      try {\n        // Get shop settings\n        const shopSettings = await storage.getShopSettings(options.shopDomain);\n        if (!shopSettings?.accessToken) {\n          throw new Error('Shop access token not found');\n        }\n\n        const shopifyService = createShopifyService(options.shopDomain, shopSettings.accessToken);\n\n        if (options.vendor) {\n          // Get products by specific vendor\n          products = await shopifyService.getProductsByVendor(options.vendor);\n        } else {\n          // Get all products\n          let hasNextPage = true;\n          let cursor: string | undefined;\n\n          while (hasNextPage) {\n            const response = await shopifyService.getProducts(250, cursor);\n            \n            response.products.edges.forEach(edge => {\n              products.push(edge.node);\n            });\n\n            hasNextPage = response.products.pageInfo.hasNextPage;\n            cursor = response.products.pageInfo.endCursor;\n          }\n        }\n      } catch (shopifyError) {\n        // Check if it's a 401 error or if we're in mock mode\n        const is401Error = shopifyError instanceof Error && shopifyError.message.includes('401');\n        const shouldUseMockData = this.MOCK_MODE || is401Error;\n        \n        if (shouldUseMockData) {\n          logger.warn('Shopify API failed, using mock data for CSV export', {\n            shopDomain: options.shopDomain,\n            vendor: options.vendor,\n            mockMode: this.MOCK_MODE,\n            is401Error,\n            error: shopifyError instanceof Error ? shopifyError.message : 'Unknown error'\n          });\n          \n          products = this.generateMockProducts(options.vendor);\n          isUsingMockData = true;\n        } else {\n          throw shopifyError; // Re-throw if not in mock mode and not 401 error\n        }\n      }\n\n      // Apply additional filters\n      if (options.filters) {\n        products = products.filter(product => {\n          if (options.filters?.status && product.status !== options.filters.status) {\n            return false;\n          }\n          if (options.filters?.productType && product.productType !== options.filters.productType) {\n            return false;\n          }\n          return true;\n        });\n      }\n\n      // Generate CSV content\n      const csvContent = this.generateCSV(products, isUsingMockData);\n\n      // Create signed URL for download\n      const token = jwt.sign({\n        shopDomain: options.shopDomain,\n        exportDate: new Date().toISOString(),\n        filters: options.filters || {},\n        vendor: options.vendor,\n        isMockData: isUsingMockData,\n      }, this.JWT_SECRET, { expiresIn: this.EXPORT_EXPIRY });\n\n      // Store CSV content temporarily (in production, use cloud storage)\n      const exportId = this.generateExportId();\n      await this.storeCsvContent(exportId, csvContent);\n\n      const signedUrl = `/api/export/download/${exportId}?token=${token}`;\n\n      logger.info('CSV export completed', {\n        shopDomain: options.shopDomain,\n        productCount: products.length,\n        exportId,\n        isMockData: isUsingMockData,\n      });\n\n      return signedUrl;\n\n    } catch (error) {\n      logger.error('CSV export failed', {\n        shopDomain: options.shopDomain,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      throw error;\n    }\n  }\n\n  private generateCSV(products: ShopifyProduct[], isMockData = false): string {\n    const headers = [\n      'Product ID',\n      'Title',\n      'Vendor',\n      'Status',\n      'Product Type',\n      'Total Inventory'\n    ];\n\n    // Add a note if using mock data\n    const csvHeader = isMockData \n      ? '# This export contains sample/mock data for testing purposes\\n' + headers.join(',')\n      : headers.join(',');\n\n    const rows = products.map(product => [\n      product.id,\n      `\"${product.title.replace(/\"/g, '\"\"')}\"`, // Escape quotes\n      `\"${product.vendor.replace(/\"/g, '\"\"')}\"`,\n      product.status,\n      `\"${product.productType.replace(/\"/g, '\"\"')}\"`,\n      product.totalInventory.toString()\n    ]);\n\n    return [csvHeader, ...rows.map(row => row.join(','))].join('\\n');\n  }\n\n  private generateExportId(): string {\n    return `export_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private csvStorage = new Map<string, string>();\n\n  private async storeCsvContent(exportId: string, content: string): Promise<void> {\n    // In production, this should use cloud storage (S3, GCS, etc.)\n    this.csvStorage.set(exportId, content);\n    \n    // Clean up after 2 hours\n    setTimeout(() => {\n      this.csvStorage.delete(exportId);\n    }, 2 * 60 * 60 * 1000);\n  }\n\n  async getCsvContent(exportId: string): Promise<string | undefined> {\n    return this.csvStorage.get(exportId);\n  }\n\n  verifyExportToken(token: string): any {\n    try {\n      return jwt.verify(token, this.JWT_SECRET);\n    } catch (error) {\n      logger.warn('Invalid export token', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      throw new Error('Invalid or expired export token');\n    }\n  }\n\n  async exportByVendor(shopDomain: string, vendor: string): Promise<string> {\n    return this.exportProducts({\n      shopDomain,\n      vendor,\n    });\n  }\n\n  async exportAll(shopDomain: string, filters?: ExportOptions['filters']): Promise<string> {\n    return this.exportProducts({\n      shopDomain,\n      filters,\n    });\n  }\n\n  private generateMockProducts(vendor?: string): ShopifyProduct[] {\n    const mockProducts: ShopifyProduct[] = [\n      {\n        id: 'gid://shopify/Product/1001',\n        title: 'Sample Wireless Headphones',\n        vendor: vendor || 'AudioTech',\n        status: 'ACTIVE',\n        productType: 'Electronics',\n        totalInventory: 150,\n      },\n      {\n        id: 'gid://shopify/Product/1002',\n        title: 'Eco-Friendly Water Bottle',\n        vendor: vendor || 'GreenLife',\n        status: 'ACTIVE',\n        productType: 'Lifestyle',\n        totalInventory: 75,\n      },\n      {\n        id: 'gid://shopify/Product/1003',\n        title: 'Premium Coffee Beans',\n        vendor: vendor || 'RoastMaster',\n        status: 'ACTIVE',\n        productType: 'Food & Beverage',\n        totalInventory: 200,\n      },\n      {\n        id: 'gid://shopify/Product/1004',\n        title: 'Organic Cotton T-Shirt',\n        vendor: vendor || 'EcoWear',\n        status: 'DRAFT',\n        productType: 'Apparel',\n        totalInventory: 50,\n      },\n      {\n        id: 'gid://shopify/Product/1005',\n        title: 'Bluetooth Speaker',\n        vendor: vendor || 'SoundWave',\n        status: 'ACTIVE',\n        productType: 'Electronics',\n        totalInventory: 30,\n      }\n    ];\n\n    // If a specific vendor is requested, return only products for that vendor\n    if (vendor) {\n      return mockProducts.filter(product => product.vendor === vendor);\n    }\n\n    return mockProducts;\n  }\n}\n\nexport const csvExportService = new CSVExportService();\n","size_bytes":8018},"server/services/shopify.ts":{"content":"import { logger } from '../utils/logger';\n\nexport interface ShopifyProduct {\n  id: string;\n  title: string;\n  vendor: string;\n  status: string;\n  totalInventory: number;\n  productType: string;\n}\n\nexport interface ShopifyProductsResponse {\n  products: {\n    edges: Array<{\n      cursor: string;\n      node: ShopifyProduct;\n    }>;\n    pageInfo: {\n      hasNextPage: boolean;\n      endCursor: string;\n    };\n  };\n}\n\nexport interface ShopifyProductUpdateResponse {\n  productUpdate: {\n    product?: {\n      id: string;\n      vendor: string;\n    };\n    userErrors: Array<{\n      field: string;\n      message: string;\n    }>;\n  };\n}\n\nexport interface BulkUpdateResult {\n  successCount: number;\n  failureCount: number;\n  errors: Array<{\n    productId: string;\n    error: string;\n  }>;\n  userErrors: Array<{\n    productId: string;\n    field: string;\n    message: string;\n  }>;\n}\n\nexport class ShopifyService {\n  private baseUrl: string;\n  private accessToken: string;\n\n  constructor(shopDomain: string, accessToken: string) {\n    this.baseUrl = `https://${shopDomain}/admin/api/2023-10/graphql.json`;\n    this.accessToken = accessToken;\n  }\n\n  private async makeGraphQLRequestWithRetry<T>(query: string, variables?: any, maxRetries = 3): Promise<T> {\n    let lastError: Error | null = null;\n    \n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        return await this.makeGraphQLRequest<T>(query, variables);\n      } catch (error) {\n        lastError = error as Error;\n        \n        // Don't retry 4xx errors except 429\n        if (error instanceof Error && error.message.includes('Shopify API error:')) {\n          const statusMatch = error.message.match(/Shopify API error: (\\d+)/);\n          if (statusMatch) {\n            const status = parseInt(statusMatch[1]);\n            if (status >= 400 && status < 500 && status !== 429) {\n              throw error; // Don't retry 4xx except 429\n            }\n          }\n        }\n        \n        if (attempt === maxRetries) {\n          break; // Final attempt failed\n        }\n        \n        // Use Retry-After header for 429 errors, otherwise exponential backoff\n        let delay: number;\n        const retryAfter = (error as any).retryAfter;\n        \n        if (retryAfter && typeof retryAfter === 'number') {\n          // Use API-specified retry delay for rate limit errors\n          delay = retryAfter;\n          logger.warn('Shopify API request failed (rate limited), using Retry-After delay', {\n            attempt,\n            maxRetries,\n            error: error instanceof Error ? error.message : 'Unknown error',\n            retryAfterMs: delay,\n          });\n        } else {\n          // Exponential backoff with jitter for other errors\n          const baseDelay = Math.pow(2, attempt - 1) * 1000; // 1s, 2s, 4s\n          const jitter = Math.random() * 500; // 0-500ms jitter\n          delay = baseDelay + jitter;\n          logger.warn('Shopify API request failed, retrying with exponential backoff', {\n            attempt,\n            maxRetries,\n            error: error instanceof Error ? error.message : 'Unknown error',\n            retryDelay: delay,\n          });\n        }\n        \n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    \n    throw lastError || new Error('All retry attempts failed');\n  }\n\n  private async makeGraphQLRequest<T>(query: string, variables?: any): Promise<T> {\n    const startTime = Date.now();\n    \n    try {\n      const response = await fetch(this.baseUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Shopify-Access-Token': this.accessToken,\n        },\n        body: JSON.stringify({\n          query,\n          variables,\n        }),\n      });\n\n      const responseTime = Date.now() - startTime;\n      \n      // Check rate limiting headers\n      const callLimit = response.headers.get('X-Shopify-Shop-Api-Call-Limit');\n      if (callLimit) {\n        const [current, max] = callLimit.split('/').map(Number);\n        if (current / max > 0.8) { // Over 80% of rate limit\n          logger.warn('Approaching Shopify rate limit', {\n            current,\n            max,\n            percentage: Math.round((current / max) * 100),\n          });\n        }\n      }\n      \n      if (!response.ok) {\n        const retryAfter = response.headers.get('Retry-After');\n        logger.error('Shopify API error', {\n          status: response.status,\n          statusText: response.statusText,\n          responseTime,\n          retryAfter,\n        });\n        \n        // Create error with retry-after information for 429 rate limit errors\n        const error = new Error(`Shopify API error: ${response.status} ${response.statusText}`);\n        if (response.status === 429 && retryAfter) {\n          (error as any).retryAfter = parseInt(retryAfter, 10) * 1000; // Convert seconds to milliseconds\n        }\n        throw error;\n      }\n\n      const data = await response.json();\n      \n      if (data.errors) {\n        logger.error('Shopify GraphQL errors', { errors: data.errors, responseTime });\n        throw new Error(`GraphQL errors: ${JSON.stringify(data.errors)}`);\n      }\n\n      logger.info('Shopify API success', {\n        endpoint: 'graphql',\n        responseTime,\n        callLimit,\n      });\n\n      return data.data as T;\n    } catch (error) {\n      const responseTime = Date.now() - startTime;\n      logger.error('Shopify API request failed', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        responseTime,\n      });\n      throw error;\n    }\n  }\n\n  async getProducts(first = 50, after?: string, query?: string): Promise<ShopifyProductsResponse> {\n    const graphqlQuery = `\n      query GetProducts($first: Int!, $after: String, $query: String) {\n        products(first: $first, after: $after, query: $query) {\n          edges {\n            cursor\n            node {\n              id\n              title\n              vendor\n              status\n              totalInventory\n              productType\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    `;\n\n    return this.makeGraphQLRequestWithRetry<ShopifyProductsResponse>(graphqlQuery, {\n      first,\n      after,\n      query,\n    });\n  }\n\n  async updateProductVendor(productId: string, vendor: string): Promise<ShopifyProductUpdateResponse> {\n    const mutation = `\n      mutation UpdateProductVendor($productId: ID!, $vendor: String!) {\n        productUpdate(input: {id: $productId, vendor: $vendor}) {\n          product {\n            id\n            vendor\n          }\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    `;\n\n    return this.makeGraphQLRequestWithRetry<ShopifyProductUpdateResponse>(mutation, {\n      productId,\n      vendor,\n    });\n  }\n\n  async bulkUpdateVendor(productIds: string[], vendor: string): Promise<BulkUpdateResult> {\n    const result: BulkUpdateResult = {\n      successCount: 0,\n      failureCount: 0,\n      errors: [],\n      userErrors: [],\n    };\n\n    // Process products individually since Shopify doesn't have a bulk vendor update mutation\n    for (const productId of productIds) {\n      try {\n        const response = await this.updateProductVendor(productId, vendor);\n        \n        if (response.productUpdate.userErrors.length > 0) {\n          result.failureCount++;\n          response.productUpdate.userErrors.forEach(error => {\n            result.userErrors.push({\n              productId,\n              field: error.field,\n              message: error.message,\n            });\n          });\n          logger.warn('Product update had user errors', {\n            productId,\n            errors: response.productUpdate.userErrors,\n          });\n        } else {\n          result.successCount++;\n          logger.debug('Product vendor updated successfully', {\n            productId,\n            vendor,\n          });\n        }\n\n        // Add delay between requests to respect rate limits\n        if (productIds.indexOf(productId) < productIds.length - 1) {\n          await new Promise(resolve => setTimeout(resolve, 250)); // 4 requests per second\n        }\n\n      } catch (error) {\n        result.failureCount++;\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n        result.errors.push({\n          productId,\n          error: errorMessage,\n        });\n        logger.error('Product update failed', {\n          productId,\n          error: errorMessage,\n        });\n      }\n    }\n\n    logger.info('Bulk vendor update completed', {\n      totalProducts: productIds.length,\n      successCount: result.successCount,\n      failureCount: result.failureCount,\n      vendor,\n    });\n\n    return result;\n  }\n\n  async getAllVendors(): Promise<string[]> {\n    const vendors = new Set<string>();\n    let hasNextPage = true;\n    let cursor: string | undefined;\n\n    while (hasNextPage) {\n      const response = await this.getProducts(250, cursor);\n      \n      response.products.edges.forEach(edge => {\n        if (edge.node.vendor) {\n          vendors.add(edge.node.vendor);\n        }\n      });\n\n      hasNextPage = response.products.pageInfo.hasNextPage;\n      cursor = response.products.pageInfo.endCursor;\n    }\n\n    return Array.from(vendors).sort();\n  }\n\n  async getProductsByVendor(vendor: string): Promise<ShopifyProduct[]> {\n    const products: ShopifyProduct[] = [];\n    let hasNextPage = true;\n    let cursor: string | undefined;\n\n    while (hasNextPage) {\n      const response = await this.getProducts(250, cursor, `vendor:\"${vendor}\"`);\n      \n      response.products.edges.forEach(edge => {\n        products.push(edge.node);\n      });\n\n      hasNextPage = response.products.pageInfo.hasNextPage;\n      cursor = response.products.pageInfo.endCursor;\n    }\n\n    return products;\n  }\n\n  async validateConnection(): Promise<boolean> {\n    try {\n      await this.getProducts(1);\n      return true;\n    } catch (error) {\n      logger.error('Shopify connection validation failed', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      return false;\n    }\n  }\n}\n\nexport function createShopifyService(shopDomain: string, accessToken: string): ShopifyService {\n  return new ShopifyService(shopDomain, accessToken);\n}\n","size_bytes":10336},"server/utils/logger.ts":{"content":"interface LogLevel {\n  ERROR: 'error';\n  WARN: 'warn';\n  INFO: 'info';\n  DEBUG: 'debug';\n}\n\nconst LOG_LEVELS: LogLevel = {\n  ERROR: 'error',\n  WARN: 'warn',\n  INFO: 'info',\n  DEBUG: 'debug',\n};\n\ninterface LogEntry {\n  timestamp: string;\n  level: string;\n  message: string;\n  metadata?: any;\n}\n\nclass Logger {\n  private logLevel: string;\n\n  constructor() {\n    this.logLevel = process.env.LOG_LEVEL || 'info';\n  }\n\n  private shouldLog(level: string): boolean {\n    const levels = ['error', 'warn', 'info', 'debug'];\n    return levels.indexOf(level) <= levels.indexOf(this.logLevel);\n  }\n\n  private formatLog(level: string, message: string, metadata?: any): LogEntry {\n    return {\n      timestamp: new Date().toISOString(),\n      level: level.toUpperCase(),\n      message,\n      ...(metadata && { metadata }),\n    };\n  }\n\n  private output(logEntry: LogEntry): void {\n    const logString = JSON.stringify(logEntry);\n    \n    if (logEntry.level === 'ERROR') {\n      console.error(logString);\n    } else if (logEntry.level === 'WARN') {\n      console.warn(logString);\n    } else {\n      console.log(logString);\n    }\n  }\n\n  error(message: string, metadata?: any): void {\n    if (this.shouldLog(LOG_LEVELS.ERROR)) {\n      this.output(this.formatLog(LOG_LEVELS.ERROR, message, metadata));\n    }\n  }\n\n  warn(message: string, metadata?: any): void {\n    if (this.shouldLog(LOG_LEVELS.WARN)) {\n      this.output(this.formatLog(LOG_LEVELS.WARN, message, metadata));\n    }\n  }\n\n  info(message: string, metadata?: any): void {\n    if (this.shouldLog(LOG_LEVELS.INFO)) {\n      this.output(this.formatLog(LOG_LEVELS.INFO, message, metadata));\n    }\n  }\n\n  debug(message: string, metadata?: any): void {\n    if (this.shouldLog(LOG_LEVELS.DEBUG)) {\n      this.output(this.formatLog(LOG_LEVELS.DEBUG, message, metadata));\n    }\n  }\n\n  // Specific methods for different types of logs\n  apiCall(method: string, endpoint: string, statusCode: number, responseTime: number, metadata?: any): void {\n    this.info('API Call', {\n      method,\n      endpoint,\n      statusCode,\n      responseTime,\n      ...metadata,\n    });\n  }\n\n  bulkJobStart(jobId: string, shopDomain: string, productCount: number): void {\n    this.info('Bulk job started', {\n      jobId,\n      shopDomain,\n      productCount,\n      event: 'bulk_job_start',\n    });\n  }\n\n  bulkJobComplete(jobId: string, processedCount: number, totalCount: number, duration: number): void {\n    this.info('Bulk job completed', {\n      jobId,\n      processedCount,\n      totalCount,\n      duration,\n      event: 'bulk_job_complete',\n    });\n  }\n\n  bulkJobFailed(jobId: string, error: string, processedCount: number, totalCount: number): void {\n    this.error('Bulk job failed', {\n      jobId,\n      error,\n      processedCount,\n      totalCount,\n      event: 'bulk_job_failed',\n    });\n  }\n\n  exportRequest(shopDomain: string, vendor?: string, filters?: any): void {\n    this.info('Export requested', {\n      shopDomain,\n      vendor,\n      filters,\n      event: 'export_request',\n    });\n  }\n\n  exportComplete(shopDomain: string, productCount: number, exportId: string): void {\n    this.info('Export completed', {\n      shopDomain,\n      productCount,\n      exportId,\n      event: 'export_complete',\n    });\n  }\n\n  shopifyApiError(shopDomain: string, endpoint: string, error: string, responseTime: number): void {\n    this.error('Shopify API error', {\n      shopDomain,\n      endpoint,\n      error,\n      responseTime,\n      event: 'shopify_api_error',\n    });\n  }\n\n  shopifyRateLimit(shopDomain: string, retryAfter: number): void {\n    this.warn('Shopify rate limit hit', {\n      shopDomain,\n      retryAfter,\n      event: 'shopify_rate_limit',\n    });\n  }\n\n  authSuccess(shopDomain: string, scope?: string): void {\n    this.info('Shop authentication successful', {\n      shopDomain,\n      scope,\n      event: 'auth_success',\n    });\n  }\n\n  authFailure(shopDomain: string, error: string): void {\n    this.error('Shop authentication failed', {\n      shopDomain,\n      error,\n      event: 'auth_failure',\n    });\n  }\n\n  cacheHit(key: string, type: string): void {\n    this.debug('Cache hit', {\n      key,\n      type,\n      event: 'cache_hit',\n    });\n  }\n\n  cacheMiss(key: string, type: string): void {\n    this.debug('Cache miss', {\n      key,\n      type,\n      event: 'cache_miss',\n    });\n  }\n\n  systemMetric(metricName: string, value: any, unit?: string): void {\n    this.info('System metric', {\n      metricName,\n      value,\n      unit,\n      event: 'system_metric',\n    });\n  }\n}\n\nexport const logger = new Logger();\n\n// Helper function to measure execution time\nexport function measureTime<T>(\n  operation: () => Promise<T>,\n  operationName: string\n): Promise<T> {\n  const start = Date.now();\n  \n  return operation()\n    .then(result => {\n      const duration = Date.now() - start;\n      logger.info(`Operation completed: ${operationName}`, { duration });\n      return result;\n    })\n    .catch(error => {\n      const duration = Date.now() - start;\n      logger.error(`Operation failed: ${operationName}`, { \n        duration,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      throw error;\n    });\n}\n","size_bytes":5173},"client/src/hooks/use-bulk-jobs.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { BulkJob } from \"@shared/schema\";\n\ninterface CreateBulkJobParams {\n  shopDomain: string;\n  productIds: string[];\n  vendor: string;\n}\n\nexport function useBulkJobs(shopDomain?: string) {\n  const queryClient = useQueryClient();\n\n  const { data: jobs, isLoading, error } = useQuery<{ jobs: BulkJob[] }>({\n    queryKey: ['/api/bulk-jobs', shopDomain],\n    queryFn: async () => {\n      const params = shopDomain ? `?shopDomain=${shopDomain}` : '';\n      const response = await fetch(`/api/bulk-jobs${params}`);\n      if (!response.ok) throw new Error('Failed to fetch bulk jobs');\n      return response.json();\n    },\n  });\n\n  const createJobMutation = useMutation({\n    mutationFn: async (params: CreateBulkJobParams) => {\n      const response = await apiRequest(\"POST\", \"/api/bulk-update-vendor\", params);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/bulk-jobs'] });\n    },\n  });\n\n  const retryJobMutation = useMutation({\n    mutationFn: async (jobId: string) => {\n      const response = await apiRequest(\"POST\", `/api/bulk-jobs/${jobId}/retry`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/bulk-jobs'] });\n    },\n  });\n\n  const cancelJobMutation = useMutation({\n    mutationFn: async (jobId: string) => {\n      const response = await apiRequest(\"POST\", `/api/bulk-jobs/${jobId}/cancel`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/bulk-jobs'] });\n    },\n  });\n\n  const getJobStatus = useQuery({\n    queryKey: ['/api/bulk-jobs/status'],\n    queryFn: async () => {\n      const response = await fetch('/api/bulk-jobs');\n      if (!response.ok) throw new Error('Failed to fetch job status');\n      return response.json();\n    },\n    refetchInterval: 5000, // Poll every 5 seconds for active jobs\n    enabled: !!jobs?.jobs?.some(job => job.status === 'RUNNING' || job.status === 'PENDING'),\n  });\n\n  return {\n    jobs: jobs?.jobs || [],\n    isLoading,\n    error,\n    createJob: createJobMutation.mutateAsync,\n    retryJob: retryJobMutation.mutateAsync,\n    cancelJob: cancelJobMutation.mutateAsync,\n    isCreating: createJobMutation.isPending,\n    isRetrying: retryJobMutation.isPending,\n    isCancelling: cancelJobMutation.isPending,\n  };\n}\n\nexport function useBulkJobStatus(jobId: string, enabled = true) {\n  return useQuery({\n    queryKey: ['/api/bulk-jobs', jobId],\n    queryFn: async () => {\n      const response = await fetch(`/api/bulk-jobs/${jobId}`);\n      if (!response.ok) throw new Error('Failed to fetch job status');\n      return response.json();\n    },\n    refetchInterval: (data) => {\n      // Stop polling if job is completed\n      if ((data as any)?.job?.status === 'SUCCESS' || (data as any)?.job?.status === 'FAILED') {\n        return false;\n      }\n      return 2000; // Poll every 2 seconds for active jobs\n    },\n    enabled,\n  });\n}\n","size_bytes":3102},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-shopify-auth.ts":{"content":"import { useState, useCallback } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ShopAuthStatus {\n  isAuthenticated: boolean;\n  shopDomain?: string;\n  scope?: string;\n}\n\nexport function useShopifyAuth() {\n  const [currentShop, setCurrentShop] = useState<string>(\"\");\n\n  const validateShopMutation = useMutation({\n    mutationFn: async (shopDomain: string) => {\n      const response = await apiRequest(\"GET\", `/api/settings?shopDomain=${shopDomain}`);\n      return response.json();\n    },\n  });\n\n  const generateAuthUrlMutation = useMutation({\n    mutationFn: async (shopDomain: string) => {\n      // This would typically call your backend to generate the OAuth URL\n      const clientId = import.meta.env.VITE_SHOPIFY_CLIENT_ID || 'your_client_id';\n      const redirectUri = `${window.location.origin}/api/auth/callback`;\n      const scopes = ['read_products', 'write_products'];\n      \n      const params = new URLSearchParams({\n        client_id: clientId,\n        scope: scopes.join(','),\n        redirect_uri: redirectUri,\n        state: crypto.getRandomValues(new Uint32Array(1))[0].toString(16),\n      });\n\n      return `https://${shopDomain}/admin/oauth/authorize?${params.toString()}`;\n    },\n  });\n\n  const checkAuthStatus = useCallback(async (shopDomain: string): Promise<ShopAuthStatus> => {\n    try {\n      await validateShopMutation.mutateAsync(shopDomain);\n      return {\n        isAuthenticated: true,\n        shopDomain,\n      };\n    } catch (error) {\n      return {\n        isAuthenticated: false,\n        shopDomain,\n      };\n    }\n  }, [validateShopMutation]);\n\n  const initiateAuth = useCallback(async (shopDomain: string) => {\n    try {\n      const authUrl = await generateAuthUrlMutation.mutateAsync(shopDomain);\n      window.location.href = authUrl;\n    } catch (error) {\n      throw new Error('Failed to initiate authentication');\n    }\n  }, [generateAuthUrlMutation]);\n\n  return {\n    currentShop,\n    setCurrentShop,\n    checkAuthStatus,\n    initiateAuth,\n    isValidating: validateShopMutation.isPending,\n    isGeneratingAuth: generateAuthUrlMutation.isPending,\n  };\n}\n","size_bytes":2183},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-vendors.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport function useVendors(shopDomain: string) {\n  const queryClient = useQueryClient();\n\n  const { data: vendorsData, isLoading, error } = useQuery<{ vendors: string[] }>({\n    queryKey: ['/api/vendors', shopDomain],\n    queryFn: async () => {\n      if (!shopDomain) throw new Error('Shop domain is required');\n      \n      const response = await fetch(`/api/vendors?shopDomain=${shopDomain}`);\n      if (!response.ok) throw new Error('Failed to fetch vendors');\n      return response.json();\n    },\n    enabled: !!shopDomain,\n  });\n\n  const refreshVendorsMutation = useMutation({\n    mutationFn: async () => {\n      if (!shopDomain) throw new Error('Shop domain is required');\n      \n      // Invalidate cache to force refresh from Shopify\n      queryClient.removeQueries({ queryKey: ['/api/vendors', shopDomain] });\n      const response = await fetch(`/api/vendors?shopDomain=${shopDomain}`);\n      if (!response.ok) throw new Error('Failed to refresh vendors');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/vendors'] });\n    },\n  });\n\n  const exportVendorMutation = useMutation({\n    mutationFn: async (params: { shopDomain: string; vendor?: string; filters?: any }) => {\n      const response = await apiRequest(\"POST\", \"/api/export\", params);\n      return response.json();\n    },\n  });\n\n  return {\n    vendors: vendorsData?.vendors || [],\n    isLoading,\n    error,\n    refreshVendors: refreshVendorsMutation.mutateAsync,\n    exportVendor: exportVendorMutation.mutateAsync,\n    isRefreshing: refreshVendorsMutation.isPending,\n    isExporting: exportVendorMutation.isPending,\n  };\n}\n\nexport function useVendorExport() {\n  return useMutation({\n    mutationFn: async (params: { \n      shopDomain: string; \n      vendor?: string; \n      filters?: {\n        status?: string;\n        productType?: string;\n      }\n    }) => {\n      const response = await apiRequest(\"POST\", \"/api/export\", params);\n      return response.json();\n    },\n  });\n}\n","size_bytes":2139},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/api-status.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface ApiEndpointStats {\n  endpoint: string;\n  avgResponseTime: number;\n  errorRate: number;\n}\n\nexport default function ApiStatus() {\n  const { data: healthData, isLoading: healthLoading } = useQuery({\n    queryKey: ['/api/health'],\n  });\n\n  const { data: statsData, isLoading: statsLoading } = useQuery<{\n    activeShops: number;\n    totalVendors: number;\n    bulkJobsToday: number;\n    apiSuccessRate: number;\n    apiEndpoints: ApiEndpointStats[];\n  }>({\n    queryKey: ['/api/stats'],\n  });\n\n  const getStatusColor = (avgResponseTime: number, errorRate: number) => {\n    if (errorRate > 5 || avgResponseTime > 1000) return \"bg-red-500\";\n    if (errorRate > 1 || avgResponseTime > 500) return \"bg-orange-500\";\n    return \"bg-green-500\";\n  };\n\n  const getStatusBadge = (avgResponseTime: number, errorRate: number) => {\n    if (errorRate > 5 || avgResponseTime > 1000) {\n      return <Badge variant=\"destructive\">Unhealthy</Badge>;\n    }\n    if (errorRate > 1 || avgResponseTime > 500) {\n      return <Badge className=\"bg-orange-100 text-orange-800\">Slow</Badge>;\n    }\n    return <Badge className=\"bg-green-100 text-green-800\">Healthy</Badge>;\n  };\n\n  // Default endpoints if no data\n  const defaultEndpoints = [\n    { endpoint: \"/api/vendors\", avgResponseTime: 127, errorRate: 0 },\n    { endpoint: \"/api/bulk-update-vendor\", avgResponseTime: 234, errorRate: 0 },\n    { endpoint: \"/api/export\", avgResponseTime: 1200, errorRate: 1.2 },\n    { endpoint: \"/api/settings\", avgResponseTime: 89, errorRate: 0 },\n    { endpoint: \"/api/bulk-jobs\", avgResponseTime: 156, errorRate: 0 },\n    { endpoint: \"/api/health\", avgResponseTime: 45, errorRate: 0 },\n  ];\n\n  const endpoints = statsData?.apiEndpoints?.length ? statsData.apiEndpoints : defaultEndpoints;\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header \n        title=\"API Status\" \n        description=\"Monitor API endpoint health and performance metrics\"\n      />\n      \n      <main className=\"flex-1 overflow-auto p-6 space-y-6\">\n        {/* System Health Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">System Health</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {healthLoading ? (\n                <div className=\"animate-pulse\">\n                  <div className=\"h-4 bg-muted rounded w-20 mb-2\"></div>\n                  <div className=\"h-3 bg-muted rounded w-32\"></div>\n                </div>\n              ) : (\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`w-3 h-3 rounded-full ${(healthData as any)?.status === 'healthy' ? 'bg-green-500' : 'bg-red-500'}`}></div>\n                  <div>\n                    <p className=\"font-medium capitalize\" data-testid=\"system-health-status\">\n                      {(healthData as any)?.status || 'Unknown'}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Last checked: {new Date().toLocaleTimeString()}\n                    </p>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">API Success Rate</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {statsLoading ? (\n                <div className=\"animate-pulse\">\n                  <div className=\"h-8 bg-muted rounded w-16 mb-2\"></div>\n                  <div className=\"h-3 bg-muted rounded w-24\"></div>\n                </div>\n              ) : (\n                <div>\n                  <p className=\"text-2xl font-bold text-foreground\" data-testid=\"api-success-rate\">\n                    {statsData?.apiSuccessRate || 0}%\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">Last 24 hours</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Active Endpoints</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"active-endpoints-count\">\n                  {endpoints.length}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Monitoring endpoints</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Endpoint Status Details */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Endpoint Performance</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {endpoints.map((endpoint, index) => {\n                const statusColor = getStatusColor(endpoint.avgResponseTime, endpoint.errorRate);\n                \n                return (\n                  <div \n                    key={index} \n                    className=\"flex items-center justify-between p-4 border rounded-lg\"\n                    data-testid={`endpoint-detail-${endpoint.endpoint.replace(/[^a-zA-Z0-9]/g, '-')}`}\n                  >\n                    <div className=\"flex items-center space-x-4\">\n                      <div className={`w-3 h-3 ${statusColor} rounded-full`}></div>\n                      <div>\n                        <p className=\"font-medium text-foreground\">{endpoint.endpoint}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {endpoint.avgResponseTime}ms avg response time\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"text-right\">\n                        <p className=\"text-sm font-medium\">{endpoint.errorRate.toFixed(1)}% error rate</p>\n                        <p className=\"text-xs text-muted-foreground\">24h average</p>\n                      </div>\n                      {getStatusBadge(endpoint.avgResponseTime, endpoint.errorRate)}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Performance Metrics Chart Placeholder */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Response Time Trends</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64 bg-muted rounded-lg flex items-center justify-center\">\n              <div className=\"text-center\">\n                <i className=\"fas fa-chart-line text-muted-foreground text-4xl mb-4\"></i>\n                <p className=\"text-muted-foreground\">Performance Charts</p>\n                <p className=\"text-xs text-muted-foreground\">Real-time monitoring charts coming soon</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":7246},"client/src/pages/bulk-jobs.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/layout/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { BulkJob } from \"@shared/schema\";\n\nexport default function BulkJobs() {\n  const [shopDomain, setShopDomain] = useState(\"\");\n  const [productIds, setProductIds] = useState(\"\");\n  const [targetVendor, setTargetVendor] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: jobsData, isLoading } = useQuery<{ jobs: BulkJob[] }>({\n    queryKey: ['/api/bulk-jobs'],\n  });\n\n  const createJobMutation = useMutation({\n    mutationFn: async (data: { shopDomain: string; productIds: string[]; vendor: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/bulk-update-vendor\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Bulk job created\",\n        description: \"Your bulk vendor update job has been started\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/bulk-jobs'] });\n      setShopDomain(\"\");\n      setProductIds(\"\");\n      setTargetVendor(\"\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to create job\",\n        description: error instanceof Error ? error.message : \"Unknown error\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const retryJobMutation = useMutation({\n    mutationFn: async (jobId: string) => {\n      const response = await apiRequest(\"POST\", `/api/bulk-jobs/${jobId}/retry`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Job retry initiated\",\n        description: \"The job has been queued for retry\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/bulk-jobs'] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Retry failed\",\n        description: error instanceof Error ? error.message : \"Unknown error\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const cancelJobMutation = useMutation({\n    mutationFn: async (jobId: string) => {\n      const response = await apiRequest(\"POST\", `/api/bulk-jobs/${jobId}/cancel`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Job cancelled\",\n        description: \"The job has been cancelled successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/bulk-jobs'] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Cancel failed\",\n        description: error instanceof Error ? error.message : \"Unknown error\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!shopDomain || !productIds || !targetVendor) {\n      toast({\n        title: \"Missing required fields\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const productIdList = productIds\n      .split('\\n')\n      .map(id => id.trim())\n      .filter(id => id.length > 0);\n\n    createJobMutation.mutate({\n      shopDomain,\n      productIds: productIdList,\n      vendor: targetVendor,\n    });\n  };\n\n  const getStatusBadge = (status: BulkJob['status']) => {\n    const statusStyles = {\n      SUCCESS: \"bg-green-100 text-green-800\",\n      RUNNING: \"bg-orange-100 text-orange-800\", \n      PENDING: \"bg-blue-100 text-blue-800\",\n      FAILED: \"bg-red-100 text-red-800\"\n    };\n\n    if (!status) return <Badge>Unknown</Badge>;\n\n    return (\n      <Badge className={`px-2 py-1 text-xs font-medium rounded-full ${statusStyles[status]}`}>\n        {status}\n      </Badge>\n    );\n  };\n\n  const formatTimeAgo = (date: Date | string) => {\n    const now = new Date();\n    const then = new Date(date);\n    const diffMs = now.getTime() - then.getTime();\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffMinutes = Math.floor(diffMs / (1000 * 60));\n\n    if (diffHours > 0) {\n      return `${diffHours} hours ago`;\n    } else if (diffMinutes > 0) {\n      return `${diffMinutes} min ago`;\n    } else {\n      return 'Just now';\n    }\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header \n        title=\"Bulk Jobs\" \n        description=\"Manage and monitor bulk vendor update operations\"\n      />\n      \n      <main className=\"flex-1 overflow-auto p-6 space-y-6\">\n        {/* Create New Job Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Create New Bulk Job</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"shopDomain\">Shop Domain</Label>\n                  <Input\n                    id=\"shopDomain\"\n                    placeholder=\"example.myshopify.com\"\n                    value={shopDomain}\n                    onChange={(e) => setShopDomain(e.target.value)}\n                    data-testid=\"input-shop-domain\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"targetVendor\">Target Vendor</Label>\n                  <Input\n                    id=\"targetVendor\"\n                    placeholder=\"Nike\"\n                    value={targetVendor}\n                    onChange={(e) => setTargetVendor(e.target.value)}\n                    data-testid=\"input-target-vendor\"\n                  />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"productIds\">Product IDs (one per line)</Label>\n                <Textarea\n                  id=\"productIds\"\n                  placeholder=\"gid://shopify/Product/123&#10;gid://shopify/Product/456\"\n                  value={productIds}\n                  onChange={(e) => setProductIds(e.target.value)}\n                  rows={6}\n                  data-testid=\"textarea-product-ids\"\n                />\n              </div>\n              <Button \n                type=\"submit\" \n                disabled={createJobMutation.isPending}\n                data-testid=\"button-create-job\"\n              >\n                {createJobMutation.isPending ? \"Creating...\" : \"Create Bulk Job\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        {/* Jobs List */}\n        <Card>\n          <CardHeader>\n            <CardTitle>All Bulk Jobs</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(3)].map((_, i) => (\n                  <div key={i} className=\"animate-pulse border rounded-lg p-4\">\n                    <div className=\"h-4 bg-muted rounded w-1/3 mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : jobsData?.jobs?.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No bulk jobs found\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {jobsData?.jobs?.map((job) => (\n                  <div key={job.id} className=\"border rounded-lg p-4\" data-testid={`job-card-${job.id}`}>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-mono text-sm\">#{job.id.slice(0, 12)}</span>\n                        {getStatusBadge(job.status)}\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        {job.status === 'FAILED' && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => retryJobMutation.mutate(job.id)}\n                            disabled={retryJobMutation.isPending}\n                            data-testid={`button-retry-${job.id}`}\n                          >\n                            Retry\n                          </Button>\n                        )}\n                        {(job.status === 'PENDING' || job.status === 'RUNNING') && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => cancelJobMutation.mutate(job.id)}\n                            disabled={cancelJobMutation.isPending}\n                            data-testid={`button-cancel-${job.id}`}\n                          >\n                            Cancel\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                      <div>\n                        <span className=\"text-muted-foreground\">Shop:</span>\n                        <p className=\"font-medium\">{job.shopDomain}</p>\n                      </div>\n                      <div>\n                        <span className=\"text-muted-foreground\">Target Vendor:</span>\n                        <p className=\"font-medium\">{job.targetVendor}</p>\n                      </div>\n                      <div>\n                        <span className=\"text-muted-foreground\">Progress:</span>\n                        <p className=\"font-medium\">{job.processedCount || 0}/{job.totalCount}</p>\n                      </div>\n                      <div>\n                        <span className=\"text-muted-foreground\">Created:</span>\n                        <p className=\"font-medium\">{formatTimeAgo(job.createdAt!)}</p>\n                      </div>\n                    </div>\n                    {job.errorMessage && (\n                      <div className=\"mt-2 p-2 bg-red-50 border border-red-200 rounded text-sm text-red-700\">\n                        Error: {job.errorMessage}\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":10607},"client/src/pages/dashboard.tsx":{"content":"import { Header } from \"@/components/layout/header\";\nimport { StatsGrid } from \"@/components/dashboard/stats-grid\";\nimport { BulkJobsTable } from \"@/components/dashboard/bulk-jobs-table\";\nimport { ApiStatusPanel } from \"@/components/dashboard/api-status-panel\";\nimport { QuickActions } from \"@/components/dashboard/quick-actions\";\n\nexport default function Dashboard() {\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header \n        title=\"System Overview\" \n        description=\"Monitor and manage your Shopify vendor operations\"\n      />\n      \n      <main className=\"flex-1 overflow-auto p-6 space-y-6\">\n        {/* Stats Cards */}\n        <StatsGrid />\n        \n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Recent Bulk Jobs */}\n          <BulkJobsTable />\n          \n          {/* API Endpoints Status */}\n          <ApiStatusPanel />\n        </div>\n        \n        {/* System Performance Chart - Placeholder */}\n        <div className=\"bg-card rounded-lg border border-border\">\n          <div className=\"p-6 border-b border-border\">\n            <h3 className=\"text-lg font-semibold text-foreground\">System Performance</h3>\n            <p className=\"text-sm text-muted-foreground\">API response times and job processing metrics (Last 24 hours)</p>\n          </div>\n          <div className=\"p-6\">\n            <div className=\"h-64 bg-muted rounded-lg flex items-center justify-center\">\n              <div className=\"text-center\">\n                <i className=\"fas fa-chart-line text-muted-foreground text-4xl mb-4\"></i>\n                <p className=\"text-muted-foreground\">Performance Chart</p>\n                <p className=\"text-xs text-muted-foreground\">Chart integration coming soon</p>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Quick Actions Panel */}\n        <QuickActions />\n      </main>\n    </div>\n  );\n}\n","size_bytes":1963},"client/src/pages/logs.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/layout/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport type { ApiLog } from \"@shared/schema\";\n\nexport default function Logs() {\n  const [shopDomain, setShopDomain] = useState(\"\");\n  const [limit, setLimit] = useState(\"100\");\n\n  const { data: logsData, isLoading, refetch } = useQuery<{ logs: ApiLog[] }>({\n    queryKey: ['/api/logs', shopDomain, limit],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (shopDomain) params.append('shopDomain', shopDomain);\n      if (limit) params.append('limit', limit);\n      \n      const response = await fetch(`/api/logs?${params.toString()}`);\n      if (!response.ok) throw new Error('Failed to fetch logs');\n      return response.json();\n    },\n  });\n\n  const getStatusBadge = (statusCode: number | null) => {\n    if (!statusCode) return <Badge variant=\"secondary\">Unknown</Badge>;\n    \n    if (statusCode >= 200 && statusCode < 300) {\n      return <Badge className=\"bg-green-100 text-green-800\">Success</Badge>;\n    } else if (statusCode >= 400 && statusCode < 500) {\n      return <Badge className=\"bg-orange-100 text-orange-800\">Client Error</Badge>;\n    } else if (statusCode >= 500) {\n      return <Badge variant=\"destructive\">Server Error</Badge>;\n    } else {\n      return <Badge variant=\"secondary\">{statusCode}</Badge>;\n    }\n  };\n\n  const getMethodBadge = (method: string) => {\n    const methodColors = {\n      GET: \"bg-blue-100 text-blue-800\",\n      POST: \"bg-green-100 text-green-800\",\n      PUT: \"bg-orange-100 text-orange-800\",\n      DELETE: \"bg-red-100 text-red-800\",\n      PATCH: \"bg-purple-100 text-purple-800\",\n    };\n\n    return (\n      <Badge className={methodColors[method as keyof typeof methodColors] || \"bg-gray-100 text-gray-800\"}>\n        {method}\n      </Badge>\n    );\n  };\n\n  const formatTimeAgo = (timestamp: string | Date) => {\n    const timestampStr = typeof timestamp === 'string' ? timestamp : timestamp.toISOString();\n    const now = new Date();\n    const then = new Date(timestampStr);\n    const diffMs = now.getTime() - then.getTime();\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffMinutes = Math.floor(diffMs / (1000 * 60));\n\n    if (diffHours > 0) {\n      return `${diffHours}h ago`;\n    } else if (diffMinutes > 0) {\n      return `${diffMinutes}m ago`;\n    } else {\n      return 'Just now';\n    }\n  };\n\n  const handleExportLogs = () => {\n    if (!logsData?.logs) return;\n    \n    const csvContent = convertLogsToCSV(logsData.logs);\n    downloadCSV(csvContent, `api-logs-${new Date().toISOString().split('T')[0]}.csv`);\n  };\n\n  const convertLogsToCSV = (logs: ApiLog[]) => {\n    const headers = [\"Timestamp\", \"Endpoint\", \"Method\", \"Status Code\", \"Response Time (ms)\", \"Shop Domain\", \"Error Message\"];\n    const rows = logs.map(log => [\n      log.timestamp,\n      log.endpoint,\n      log.method,\n      log.statusCode || \"\",\n      log.responseTime || \"\",\n      log.shopDomain || \"\",\n      log.errorMessage || \"\"\n    ]);\n    \n    return [headers.join(\",\"), ...rows.map(row => row.join(\",\"))].join(\"\\n\");\n  };\n\n  const downloadCSV = (content: string, filename: string) => {\n    const blob = new Blob([content], { type: \"text/csv\" });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header \n        title=\"API Logs\" \n        description=\"Monitor API requests and system activity logs\"\n      />\n      \n      <main className=\"flex-1 overflow-auto p-6 space-y-6\">\n        {/* Filters */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Log Filters</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"shopDomain\">Shop Domain (Optional)</Label>\n                <Input\n                  id=\"shopDomain\"\n                  placeholder=\"example.myshopify.com\"\n                  value={shopDomain}\n                  onChange={(e) => setShopDomain(e.target.value)}\n                  data-testid=\"input-shop-domain-filter\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"limit\">Number of Logs</Label>\n                <Select value={limit} onValueChange={setLimit}>\n                  <SelectTrigger data-testid=\"select-limit\">\n                    <SelectValue placeholder=\"Select limit\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"50\">50 logs</SelectItem>\n                    <SelectItem value=\"100\">100 logs</SelectItem>\n                    <SelectItem value=\"250\">250 logs</SelectItem>\n                    <SelectItem value=\"500\">500 logs</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"flex items-end space-x-2\">\n                <Button \n                  onClick={() => refetch()}\n                  disabled={isLoading}\n                  data-testid=\"button-refresh-logs\"\n                >\n                  <i className=\"fas fa-sync mr-2\"></i>\n                  Refresh\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  onClick={handleExportLogs}\n                  disabled={!logsData?.logs?.length}\n                  data-testid=\"button-export-logs\"\n                >\n                  <i className=\"fas fa-download mr-2\"></i>\n                  Export\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Logs Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent API Logs</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(5)].map((_, i) => (\n                  <div key={i} className=\"animate-pulse border rounded-lg p-4\">\n                    <div className=\"grid grid-cols-6 gap-4\">\n                      <div className=\"h-4 bg-muted rounded\"></div>\n                      <div className=\"h-4 bg-muted rounded\"></div>\n                      <div className=\"h-4 bg-muted rounded\"></div>\n                      <div className=\"h-4 bg-muted rounded\"></div>\n                      <div className=\"h-4 bg-muted rounded\"></div>\n                      <div className=\"h-4 bg-muted rounded\"></div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : !logsData?.logs?.length ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No API logs found\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                {logsData.logs.map((log) => (\n                  <div \n                    key={log.id} \n                    className=\"border rounded-lg p-4 hover:bg-muted/50\"\n                    data-testid={`log-entry-${log.id}`}\n                  >\n                    <div className=\"grid grid-cols-1 md:grid-cols-6 gap-4 items-center\">\n                      <div>\n                        <div className=\"font-mono text-sm text-foreground\">{log.endpoint}</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {formatTimeAgo(log.timestamp || new Date().toISOString())}\n                        </div>\n                      </div>\n                      <div>\n                        {getMethodBadge(log.method)}\n                      </div>\n                      <div>\n                        {getStatusBadge(log.statusCode)}\n                      </div>\n                      <div className=\"text-sm\">\n                        {log.responseTime ? `${log.responseTime}ms` : 'N/A'}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {log.shopDomain || 'System'}\n                      </div>\n                      <div>\n                        {log.errorMessage && (\n                          <div className=\"text-xs text-red-600 truncate\" title={log.errorMessage}>\n                            <i className=\"fas fa-exclamation-triangle mr-1\"></i>\n                            {log.errorMessage}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Log Statistics */}\n        {logsData?.logs?.length && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Log Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div className=\"text-center p-4 border rounded\">\n                  <div className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-total-logs\">\n                    {logsData.logs.length}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Total Logs</div>\n                </div>\n                <div className=\"text-center p-4 border rounded\">\n                  <div className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-success-logs\">\n                    {logsData.logs.filter(log => log.statusCode && log.statusCode >= 200 && log.statusCode < 300).length}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Success</div>\n                </div>\n                <div className=\"text-center p-4 border rounded\">\n                  <div className=\"text-2xl font-bold text-orange-600\" data-testid=\"stat-error-logs\">\n                    {logsData.logs.filter(log => log.statusCode && log.statusCode >= 400).length}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Errors</div>\n                </div>\n                <div className=\"text-center p-4 border rounded\">\n                  <div className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-avg-response-time\">\n                    {Math.round(logsData.logs.filter(log => log.responseTime).reduce((acc, log) => acc + (log.responseTime || 0), 0) / logsData.logs.filter(log => log.responseTime).length) || 0}ms\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Avg Response</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </main>\n    </div>\n  );\n}\n","size_bytes":11161},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/layout/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ShopSettings {\n  shopDomain: string;\n  showVendorColumn: boolean;\n  lastUpdated: string;\n}\n\nexport default function Settings() {\n  const [shopDomain, setShopDomain] = useState(\"\");\n  const [showVendorColumn, setShowVendorColumn] = useState(true);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: settings, isLoading } = useQuery<ShopSettings>({\n    queryKey: ['/api/settings', shopDomain],\n    enabled: !!shopDomain,\n  });\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (data: { shopDomain: string; showVendorColumn: boolean }) => {\n      const response = await apiRequest(\"POST\", \"/api/settings\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Settings updated\",\n        description: \"Your shop settings have been saved successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/settings'] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Update failed\",\n        description: error instanceof Error ? error.message : \"Unknown error\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update local state when settings data changes\n  useEffect(() => {\n    if (settings) {\n      setShowVendorColumn(settings.showVendorColumn);\n    }\n  }, [settings]);\n\n  const handleLoadSettings = () => {\n    if (!shopDomain) {\n      toast({\n        title: \"Shop domain required\",\n        description: \"Please enter a shop domain to load settings\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    queryClient.invalidateQueries({ queryKey: ['/api/settings', shopDomain] });\n  };\n\n  const handleSaveSettings = () => {\n    if (!shopDomain) {\n      toast({\n        title: \"Shop domain required\",\n        description: \"Please enter a shop domain to save settings\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateSettingsMutation.mutate({\n      shopDomain,\n      showVendorColumn,\n    });\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header \n        title=\"Settings\" \n        description=\"Configure shop preferences and vendor column display options\"\n      />\n      \n      <main className=\"flex-1 overflow-auto p-6 space-y-6\">\n        {/* Shop Configuration */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Shop Configuration</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-end space-x-4\">\n              <div className=\"flex-1\">\n                <Label htmlFor=\"shopDomain\">Shop Domain</Label>\n                <Input\n                  id=\"shopDomain\"\n                  placeholder=\"example.myshopify.com\"\n                  value={shopDomain}\n                  onChange={(e) => setShopDomain(e.target.value)}\n                  data-testid=\"input-shop-domain\"\n                />\n              </div>\n              <Button \n                onClick={handleLoadSettings}\n                disabled={isLoading || !shopDomain}\n                data-testid=\"button-load-settings\"\n              >\n                {isLoading ? \"Loading...\" : \"Load Settings\"}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Vendor Column Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Vendor Column Display</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {!shopDomain ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                Enter a shop domain to configure settings\n              </div>\n            ) : isLoading ? (\n              <div className=\"space-y-4\">\n                <div className=\"animate-pulse flex items-center justify-between\">\n                  <div className=\"h-4 bg-muted rounded w-48\"></div>\n                  <div className=\"h-6 bg-muted rounded w-12\"></div>\n                </div>\n              </div>\n            ) : (\n              <>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label htmlFor=\"showVendorColumn\" className=\"text-base\">\n                      Show Vendor Column\n                    </Label>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Display the vendor column in the product list interface\n                    </div>\n                  </div>\n                  <Switch\n                    id=\"showVendorColumn\"\n                    checked={showVendorColumn}\n                    onCheckedChange={setShowVendorColumn}\n                    data-testid=\"switch-show-vendor-column\"\n                  />\n                </div>\n\n                <div className=\"pt-4 border-t\">\n                  <Button \n                    onClick={handleSaveSettings}\n                    disabled={updateSettingsMutation.isPending}\n                    data-testid=\"button-save-settings\"\n                  >\n                    {updateSettingsMutation.isPending ? \"Saving...\" : \"Save Settings\"}\n                  </Button>\n                </div>\n              </>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Current Settings Display */}\n        {settings && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Current Settings</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm text-muted-foreground\">Shop Domain</Label>\n                    <p className=\"font-medium\" data-testid=\"current-shop-domain\">{settings.shopDomain}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm text-muted-foreground\">Vendor Column Visible</Label>\n                    <p className=\"font-medium\" data-testid=\"current-vendor-column-status\">\n                      {settings.showVendorColumn ? \"Yes\" : \"No\"}\n                    </p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm text-muted-foreground\">Last Updated</Label>\n                    <p className=\"font-medium\" data-testid=\"current-last-updated\">\n                      {new Date(settings.lastUpdated).toLocaleString()}\n                    </p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm text-muted-foreground\">Status</Label>\n                    <p className=\"font-medium text-green-600\" data-testid=\"current-settings-status\">\n                      <i className=\"fas fa-check-circle mr-1\"></i>\n                      Active\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Settings Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle>About Settings</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3 text-sm text-muted-foreground\">\n              <p>\n                <strong>Vendor Column Display:</strong> Controls whether the vendor column is visible in your Shopify admin product list. When enabled, you can see and manage vendor information directly from the product interface.\n              </p>\n              <p>\n                <strong>Configuration Persistence:</strong> All settings are automatically saved and will persist across sessions. Changes take effect immediately in your Shopify admin interface.\n              </p>\n              <p>\n                <strong>Bulk Operations:</strong> When the vendor column is enabled, you can perform bulk vendor updates and exports directly from the product list interface.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":8468},"client/src/pages/vendors.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/layout/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useVendors } from \"@/hooks/use-vendors\";\n\nexport default function Vendors() {\n  const [shopDomain, setShopDomain] = useState(\"\");\n  const [exportVendor, setExportVendor] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { vendors, isLoading: vendorsLoading, refreshVendors } = useVendors(shopDomain);\n\n  const exportMutation = useMutation({\n    mutationFn: async (data: { shopDomain: string; vendor?: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/export\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Open download URL in new tab\n      window.open(data.downloadUrl, '_blank');\n      toast({\n        title: \"Export created\",\n        description: \"Your CSV export is ready for download\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Export failed\",\n        description: error instanceof Error ? error.message : \"Unknown error\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLoadVendors = () => {\n    if (!shopDomain) {\n      toast({\n        title: \"Shop domain required\",\n        description: \"Please enter a shop domain to load vendors\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    refreshVendors();\n  };\n\n  const handleExport = (vendor?: string) => {\n    if (!shopDomain) {\n      toast({\n        title: \"Shop domain required\",\n        description: \"Please enter a shop domain to export\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    exportMutation.mutate({\n      shopDomain,\n      vendor: vendor || undefined,\n    });\n  };\n\n  const handleExportAll = () => {\n    handleExport();\n  };\n\n  const handleExportByVendor = () => {\n    if (!exportVendor) {\n      toast({\n        title: \"Vendor required\",\n        description: \"Please select a vendor to export\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    handleExport(exportVendor);\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header \n        title=\"Vendors\" \n        description=\"Manage vendor lists and export product data by vendor\"\n      />\n      \n      <main className=\"flex-1 overflow-auto p-6 space-y-6\">\n        {/* Shop Domain Input */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Shop Configuration</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-end space-x-4\">\n              <div className=\"flex-1\">\n                <Label htmlFor=\"shopDomain\">Shop Domain</Label>\n                <Input\n                  id=\"shopDomain\"\n                  placeholder=\"example.myshopify.com\"\n                  value={shopDomain}\n                  onChange={(e) => setShopDomain(e.target.value)}\n                  data-testid=\"input-shop-domain\"\n                />\n              </div>\n              <Button \n                onClick={handleLoadVendors}\n                disabled={vendorsLoading || !shopDomain}\n                data-testid=\"button-load-vendors\"\n              >\n                {vendorsLoading ? \"Loading...\" : \"Load Vendors\"}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Vendor List */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Vendor List</CardTitle>\n              <div className=\"flex space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={handleLoadVendors}\n                  disabled={vendorsLoading || !shopDomain}\n                  data-testid=\"button-refresh-vendors\"\n                >\n                  <i className=\"fas fa-sync mr-2\"></i>\n                  Refresh\n                </Button>\n                <Button\n                  onClick={handleExportAll}\n                  disabled={exportMutation.isPending || !shopDomain}\n                  data-testid=\"button-export-all\"\n                >\n                  <i className=\"fas fa-download mr-2\"></i>\n                  Export All Products\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {!shopDomain ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                Enter a shop domain to load vendors\n              </div>\n            ) : vendorsLoading ? (\n              <div className=\"space-y-3\">\n                {[...Array(6)].map((_, i) => (\n                  <div key={i} className=\"animate-pulse flex items-center justify-between p-3 border rounded\">\n                    <div className=\"h-4 bg-muted rounded w-32\"></div>\n                    <div className=\"h-6 bg-muted rounded w-16\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : vendors.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No vendors found for this shop\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                {vendors.map((vendor, index) => (\n                  <div \n                    key={index} \n                    className=\"flex items-center justify-between p-3 border rounded hover:bg-muted/50\"\n                    data-testid={`vendor-item-${index}`}\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <i className=\"fas fa-building text-muted-foreground\"></i>\n                      <span className=\"font-medium\">{vendor}</span>\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleExport(vendor)}\n                      disabled={exportMutation.isPending}\n                      data-testid={`button-export-vendor-${index}`}\n                    >\n                      <i className=\"fas fa-download mr-1\"></i>\n                      Export\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Export by Vendor */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Export by Specific Vendor</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-end space-x-4\">\n              <div className=\"flex-1\">\n                <Label htmlFor=\"exportVendor\">Vendor Name</Label>\n                <Input\n                  id=\"exportVendor\"\n                  placeholder=\"Enter vendor name...\"\n                  value={exportVendor}\n                  onChange={(e) => setExportVendor(e.target.value)}\n                  data-testid=\"input-export-vendor\"\n                />\n              </div>\n              <Button \n                onClick={handleExportByVendor}\n                disabled={exportMutation.isPending || !shopDomain || !exportVendor}\n                data-testid=\"button-export-by-vendor\"\n              >\n                {exportMutation.isPending ? \"Exporting...\" : \"Export Vendor Products\"}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Vendor Statistics */}\n        {vendors.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Vendor Statistics</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"text-center p-4 border rounded\">\n                  <div className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-total-vendors\">\n                    {vendors.length}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Total Vendors</div>\n                </div>\n                <div className=\"text-center p-4 border rounded\">\n                  <div className=\"text-2xl font-bold text-foreground\">\n                    <i className=\"fas fa-building text-primary\"></i>\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Vendor Data Loaded</div>\n                </div>\n                <div className=\"text-center p-4 border rounded\">\n                  <div className=\"text-2xl font-bold text-foreground\">\n                    <i className=\"fas fa-sync text-green-600\"></i>\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Cache Updated</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </main>\n    </div>\n  );\n}\n","size_bytes":9113},"client/src/components/dashboard/api-status-panel.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\ninterface ApiEndpointStats {\n  endpoint: string;\n  avgResponseTime: number;\n  errorRate: number;\n}\n\nexport function ApiStatusPanel() {\n  const { data, isLoading } = useQuery<{ \n    activeShops: number;\n    totalVendors: number;\n    bulkJobsToday: number;\n    apiSuccessRate: number;\n    apiEndpoints: ApiEndpointStats[];\n  }>({\n    queryKey: ['/api/stats'],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-card rounded-lg border border-border\">\n        <div className=\"p-6 border-b border-border\">\n          <h3 className=\"text-lg font-semibold text-foreground\">API Endpoints</h3>\n          <p className=\"text-sm text-muted-foreground\">Real-time status monitoring</p>\n        </div>\n        <div className=\"p-6 space-y-4\">\n          {[...Array(4)].map((_, i) => (\n            <div key={i} className=\"animate-pulse flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-2 h-2 bg-muted rounded-full\"></div>\n                <div className=\"space-y-1\">\n                  <div className=\"h-4 bg-muted rounded w-32\"></div>\n                  <div className=\"h-3 bg-muted rounded w-16\"></div>\n                </div>\n              </div>\n              <div className=\"h-4 bg-muted rounded w-16\"></div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusColor = (avgResponseTime: number, errorRate: number) => {\n    if (errorRate > 5 || avgResponseTime > 1000) return \"bg-red-500\";\n    if (errorRate > 1 || avgResponseTime > 500) return \"bg-orange-500\";\n    return \"bg-green-500\";\n  };\n\n  const getStatusText = (avgResponseTime: number, errorRate: number) => {\n    if (errorRate > 5 || avgResponseTime > 1000) return { text: \"Unhealthy\", color: \"text-red-600\" };\n    if (errorRate > 1 || avgResponseTime > 500) return { text: \"Slow\", color: \"text-orange-600\" };\n    return { text: \"Healthy\", color: \"text-green-600\" };\n  };\n\n  // Default endpoints if no data\n  const defaultEndpoints = [\n    { endpoint: \"/api/vendors\", avgResponseTime: 127, errorRate: 0 },\n    { endpoint: \"/api/bulk-update-vendor\", avgResponseTime: 234, errorRate: 0 },\n    { endpoint: \"/api/export\", avgResponseTime: 1200, errorRate: 1.2 },\n    { endpoint: \"/api/settings\", avgResponseTime: 89, errorRate: 0 },\n  ];\n\n  const endpoints = data?.apiEndpoints?.length ? data.apiEndpoints : defaultEndpoints;\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border\">\n      <div className=\"p-6 border-b border-border\">\n        <h3 className=\"text-lg font-semibold text-foreground\">API Endpoints</h3>\n        <p className=\"text-sm text-muted-foreground\">Real-time status monitoring</p>\n      </div>\n      <div className=\"p-6 space-y-4\">\n        {endpoints.map((endpoint, index) => {\n          const statusColor = getStatusColor(endpoint.avgResponseTime, endpoint.errorRate);\n          const status = getStatusText(endpoint.avgResponseTime, endpoint.errorRate);\n          \n          return (\n            <div key={index} className=\"flex items-center justify-between\" data-testid={`endpoint-${endpoint.endpoint.replace(/[^a-zA-Z0-9]/g, '-')}`}>\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-2 h-2 ${statusColor} rounded-full`}></div>\n                <div>\n                  <p className=\"text-sm font-medium text-foreground\">{endpoint.endpoint}</p>\n                  <p className=\"text-xs text-muted-foreground\">{endpoint.avgResponseTime}ms avg</p>\n                </div>\n              </div>\n              <span className={`text-sm font-medium ${status.color}`}>{status.text}</span>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3756},"client/src/components/dashboard/bulk-jobs-table.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport type { BulkJob } from \"@shared/schema\";\n\nexport function BulkJobsTable() {\n  const { data, isLoading } = useQuery<{ jobs: BulkJob[] }>({\n    queryKey: ['/api/bulk-jobs'],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"lg:col-span-2 bg-card rounded-lg border border-border\">\n        <div className=\"p-6 border-b border-border\">\n          <h3 className=\"text-lg font-semibold text-foreground\">Recent Bulk Jobs</h3>\n        </div>\n        <div className=\"p-6 space-y-4\">\n          {[...Array(3)].map((_, i) => (\n            <div key={i} className=\"animate-pulse flex space-x-4\">\n              <div className=\"h-4 bg-muted rounded flex-1\"></div>\n              <div className=\"h-4 bg-muted rounded w-20\"></div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusBadge = (status: BulkJob['status']) => {\n    const statusStyles = {\n      SUCCESS: \"bg-green-100 text-green-800\",\n      RUNNING: \"bg-orange-100 text-orange-800\",\n      PENDING: \"bg-blue-100 text-blue-800\",\n      FAILED: \"bg-red-100 text-red-800\"\n    };\n\n    if (!status) return <Badge>Unknown</Badge>;\n\n    return (\n      <Badge className={`px-2 py-1 text-xs font-medium rounded-full ${statusStyles[status]}`}>\n        {status}\n      </Badge>\n    );\n  };\n\n  const formatTimeAgo = (date: Date | string) => {\n    const now = new Date();\n    const then = new Date(date);\n    const diffMs = now.getTime() - then.getTime();\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffMinutes = Math.floor(diffMs / (1000 * 60));\n\n    if (diffHours > 0) {\n      return `${diffHours} hours ago`;\n    } else if (diffMinutes > 0) {\n      return `${diffMinutes} min ago`;\n    } else {\n      return 'Just now';\n    }\n  };\n\n  return (\n    <div className=\"lg:col-span-2 bg-card rounded-lg border border-border\">\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold text-foreground\">Recent Bulk Jobs</h3>\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-primary hover:text-primary/80\">\n            View All\n          </Button>\n        </div>\n      </div>\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead className=\"bg-muted\">\n            <tr>\n              <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Job ID</th>\n              <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Shop</th>\n              <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Products</th>\n              <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Target Vendor</th>\n              <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Status</th>\n              <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Created</th>\n            </tr>\n          </thead>\n          <tbody>\n            {data?.jobs?.length === 0 ? (\n              <tr>\n                <td colSpan={6} className=\"p-8 text-center text-muted-foreground\">\n                  No bulk jobs found\n                </td>\n              </tr>\n            ) : (\n              data?.jobs?.map((job) => (\n                <tr key={job.id} className=\"border-b border-border hover:bg-muted/50\" data-testid={`job-row-${job.id}`}>\n                  <td className=\"p-4 text-sm font-mono text-foreground\">#{job.id.slice(0, 12)}</td>\n                  <td className=\"p-4 text-sm text-foreground\">{job.shopDomain}</td>\n                  <td className=\"p-4 text-sm text-foreground\">{job.totalCount}</td>\n                  <td className=\"p-4 text-sm text-foreground\">{job.targetVendor}</td>\n                  <td className=\"p-4\">\n                    {getStatusBadge(job.status)}\n                  </td>\n                  <td className=\"p-4 text-sm text-muted-foreground\">{formatTimeAgo(job.createdAt!)}</td>\n                </tr>\n              ))\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4211},"client/src/components/dashboard/quick-actions.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport function QuickActions() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const refreshCacheMutation = useMutation({\n    mutationFn: async () => {\n      // Invalidate vendors cache to force refresh\n      queryClient.invalidateQueries({ queryKey: ['/api/vendors'] });\n      return { success: true };\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Cache refreshed\",\n        description: \"Vendor lists have been updated\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Refresh failed\",\n        description: \"Could not refresh vendor cache\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const exportLogsMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/logs?limit=1000\");\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Create and download CSV\n      const csvContent = convertLogsToCSV(data.logs);\n      downloadCSV(csvContent, \"system-logs.csv\");\n      \n      toast({\n        title: \"Logs exported\",\n        description: \"System logs have been downloaded\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Export failed\",\n        description: \"Could not export system logs\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const healthCheckMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/health\");\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Health check complete\",\n        description: `System status: ${data.status}`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Health check failed\",\n        description: \"System diagnostics failed\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const convertLogsToCSV = (logs: any[]) => {\n    if (!logs || logs.length === 0) return \"\";\n    \n    const headers = [\"Timestamp\", \"Endpoint\", \"Method\", \"Status Code\", \"Response Time\", \"Shop Domain\"];\n    const rows = logs.map(log => [\n      log.timestamp,\n      log.endpoint,\n      log.method,\n      log.statusCode,\n      log.responseTime,\n      log.shopDomain || \"\"\n    ]);\n    \n    return [headers.join(\",\"), ...rows.map(row => row.join(\",\"))].join(\"\\n\");\n  };\n\n  const downloadCSV = (content: string, filename: string) => {\n    const blob = new Blob([content], { type: \"text/csv\" });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  };\n\n  const actions = [\n    {\n      title: \"Refresh Cache\",\n      description: \"Update vendor lists\",\n      icon: \"fas fa-sync\",\n      bgColor: \"bg-primary/10\",\n      iconColor: \"text-primary\",\n      onClick: () => refreshCacheMutation.mutate(),\n      isLoading: refreshCacheMutation.isPending,\n      testId: \"action-refresh-cache\"\n    },\n    {\n      title: \"Export Logs\",\n      description: \"Download system logs\",\n      icon: \"fas fa-download\",\n      bgColor: \"bg-secondary\",\n      iconColor: \"text-secondary-foreground\",\n      onClick: () => exportLogsMutation.mutate(),\n      isLoading: exportLogsMutation.isPending,\n      testId: \"action-export-logs\"\n    },\n    {\n      title: \"Health Check\",\n      description: \"Run diagnostics\",\n      icon: \"fas fa-heartbeat\",\n      bgColor: \"bg-green-100\",\n      iconColor: \"text-green-600\",\n      onClick: () => healthCheckMutation.mutate(),\n      isLoading: healthCheckMutation.isPending,\n      testId: \"action-health-check\"\n    },\n    {\n      title: \"New Bulk Job\",\n      description: \"Start vendor update\",\n      icon: \"fas fa-magic\",\n      bgColor: \"bg-accent\",\n      iconColor: \"text-accent-foreground\",\n      onClick: () => {\n        // Navigate to bulk jobs page\n        window.location.href = \"/bulk-jobs\";\n      },\n      isLoading: false,\n      testId: \"action-new-bulk-job\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n      {actions.map((action, index) => (\n        <Button\n          key={index}\n          variant=\"ghost\"\n          className=\"bg-card border border-border rounded-lg p-6 text-left hover:shadow-md transition-shadow h-auto\"\n          onClick={action.onClick}\n          disabled={action.isLoading}\n          data-testid={action.testId}\n        >\n          <div className=\"flex items-center space-x-3\">\n            <div className={`w-10 h-10 ${action.bgColor} rounded-lg flex items-center justify-center`}>\n              <i className={`${action.icon} ${action.iconColor}`}></i>\n            </div>\n            <div>\n              <h4 className=\"font-medium text-foreground\">{action.title}</h4>\n              <p className=\"text-sm text-muted-foreground\">{action.description}</p>\n            </div>\n          </div>\n        </Button>\n      ))}\n    </div>\n  );\n}\n","size_bytes":5157},"client/src/components/dashboard/stats-grid.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\ninterface SystemStats {\n  activeShops: number;\n  totalVendors: number;\n  bulkJobsToday: number;\n  apiSuccessRate: number;\n}\n\nexport function StatsGrid() {\n  const { data: stats, isLoading } = useQuery<{ \n    activeShops: number;\n    totalVendors: number;\n    bulkJobsToday: number;\n    apiSuccessRate: number;\n  }>({\n    queryKey: ['/api/stats'],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {[...Array(4)].map((_, i) => (\n          <div key={i} className=\"bg-card rounded-lg border border-border p-6 animate-pulse\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-2\">\n                <div className=\"h-4 bg-muted rounded w-20\"></div>\n                <div className=\"h-8 bg-muted rounded w-16\"></div>\n              </div>\n              <div className=\"w-12 h-12 bg-muted rounded-lg\"></div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  const statCards = [\n    {\n      title: \"Active Shops\",\n      value: stats?.activeShops || 0,\n      icon: \"fas fa-store\",\n      bgColor: \"bg-primary/10\",\n      iconColor: \"text-primary\",\n      change: \"+12%\",\n      changeText: \"from last month\",\n      changeColor: \"text-green-600\"\n    },\n    {\n      title: \"Total Vendors\", \n      value: stats?.totalVendors || 0,\n      icon: \"fas fa-building\",\n      bgColor: \"bg-accent/50\",\n      iconColor: \"text-accent-foreground\",\n      change: \"+3.2%\",\n      changeText: \"from last week\",\n      changeColor: \"text-green-600\"\n    },\n    {\n      title: \"Bulk Jobs Today\",\n      value: stats?.bulkJobsToday || 0,\n      icon: \"fas fa-tasks\",\n      bgColor: \"bg-secondary\",\n      iconColor: \"text-secondary-foreground\",\n      change: \"2 pending\",\n      changeText: \"in queue\",\n      changeColor: \"text-orange-600\"\n    },\n    {\n      title: \"API Success Rate\",\n      value: `${stats?.apiSuccessRate || 0}%`,\n      icon: \"fas fa-check-circle\",\n      bgColor: \"bg-green-100\",\n      iconColor: \"text-green-600\",\n      change: \"Excellent\",\n      changeText: \"system health\",\n      changeColor: \"text-green-600\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {statCards.map((stat, index) => (\n        <div key={index} className=\"bg-card rounded-lg border border-border p-6 fade-in\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">{stat.title}</p>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid={`stat-${stat.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                {stat.value}\n              </p>\n            </div>\n            <div className={`w-12 h-12 ${stat.bgColor} rounded-lg flex items-center justify-center`}>\n              <i className={`${stat.icon} ${stat.iconColor} text-xl`}></i>\n            </div>\n          </div>\n          <div className=\"mt-4 flex items-center\">\n            <span className={`${stat.changeColor} text-sm font-medium`}>{stat.change}</span>\n            <span className=\"text-muted-foreground text-sm ml-1\">{stat.changeText}</span>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":3294},"client/src/components/layout/app-layout.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"./sidebar\";\n\ninterface AppLayoutProps {\n  children: React.ReactNode;\n}\n\nexport function AppLayout({ children }: AppLayoutProps) {\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar isCollapsed={sidebarCollapsed} />\n      {children}\n    </div>\n  );\n}\n","size_bytes":402},"client/src/components/layout/header.tsx":{"content":"interface HeaderProps {\n  title: string;\n  description?: string;\n}\n\nexport function Header({ title, description }: HeaderProps) {\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-semibold text-foreground\">{title}</h2>\n          {description && (\n            <p className=\"text-muted-foreground\">{description}</p>\n          )}\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <button \n            className=\"relative p-2 text-muted-foreground hover:text-foreground transition-colors\"\n            data-testid=\"notifications-button\"\n          >\n            <i className=\"fas fa-bell text-lg\"></i>\n            <span className=\"absolute -top-1 -right-1 w-5 h-5 bg-destructive text-destructive-foreground text-xs rounded-full flex items-center justify-center\">\n              3\n            </span>\n          </button>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-primary-foreground text-sm font-medium\">AD</span>\n            </div>\n            <div className=\"text-sm\">\n              <div className=\"font-medium\">Admin User</div>\n              <div className=\"text-muted-foreground\">System Administrator</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1499},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SidebarProps {\n  isCollapsed?: boolean;\n}\n\nexport function Sidebar({ isCollapsed = false }: SidebarProps) {\n  const [location] = useLocation();\n\n  const navItems = [\n    {\n      href: \"/\",\n      icon: \"fas fa-tachometer-alt\",\n      label: \"Overview\",\n      id: \"overview\"\n    },\n    {\n      href: \"/bulk-jobs\",\n      icon: \"fas fa-tasks\",\n      label: \"Bulk Jobs\",\n      id: \"jobs\"\n    },\n    {\n      href: \"/api-status\",\n      icon: \"fas fa-code\",\n      label: \"API Status\",\n      id: \"api\"\n    },\n    {\n      href: \"/vendors\",\n      icon: \"fas fa-building\",\n      label: \"Vendors\",\n      id: \"vendors\"\n    },\n    {\n      href: \"/settings\",\n      icon: \"fas fa-cog\",\n      label: \"Settings\",\n      id: \"settings\"\n    },\n    {\n      href: \"/logs\",\n      icon: \"fas fa-file-alt\",\n      label: \"Logs\",\n      id: \"logs\"\n    }\n  ];\n\n  return (\n    <div className={cn(\n      \"bg-card border-r border-border sidebar-transition h-full flex flex-col\",\n      isCollapsed ? \"w-16\" : \"w-64\"\n    )}>\n      {/* Logo Header */}\n      <div className=\"flex items-center justify-between p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <i className=\"fas fa-shopping-cart text-primary-foreground text-sm\"></i>\n          </div>\n          {!isCollapsed && (\n            <div>\n              <h1 className=\"text-lg font-semibold text-foreground\">Vendor Restorer</h1>\n              <p className=\"text-xs text-muted-foreground\">Admin Dashboard</p>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Navigation Menu */}\n      <nav className=\"flex-1 p-4 space-y-2\">\n        {navItems.map((item) => {\n          const isActive = location === item.href || (item.href !== \"/\" && location.startsWith(item.href));\n          \n          return (\n            <Link key={item.id} href={item.href}>\n              <a\n                className={cn(\n                  \"flex items-center space-x-3 px-3 py-2 rounded-md transition-colors\",\n                  isActive\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n                )}\n                data-testid={`nav-${item.id}`}\n              >\n                <i className={`${item.icon} w-5`}></i>\n                {!isCollapsed && <span>{item.label}</span>}\n              </a>\n            </Link>\n          );\n        })}\n      </nav>\n      \n      {/* Status Footer */}\n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-center space-x-2 text-sm\">\n          <div className=\"w-2 h-2 bg-green-500 rounded-full pulse-status\"></div>\n          {!isCollapsed && <span className=\"text-muted-foreground\">System Online</span>}\n        </div>\n        {!isCollapsed && (\n          <div className=\"text-xs text-muted-foreground mt-1\">\n            Last update: 2 min ago\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3118},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}